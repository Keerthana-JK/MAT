public static int CalculateExistingBugCount(
    int failedTrCount,
    string filepath1, int sheetIndex1, string columnName1,
    string filepath2, int sheetIndex2, string columnName2)
{
    try
    {
        using (var workbook1 = new XLWorkbook(filepath1))
        using (var workbook2 = new XLWorkbook(filepath2))
        {
            // Load worksheets
            var worksheet1 = workbook1.Worksheet(sheetIndex1);
            var worksheet2 = workbook2.Worksheet(sheetIndex2);

            // Extract test case IDs and corresponding bug IDs from File 1
            var bugIdColumn = "A"; // Assuming bug ID is in column A
            var testCaseIdCells = worksheet1.Column(columnName1).CellsUsed().Skip(1); // Exclude header
            var bugIdCells = worksheet1.Column(bugIdColumn).CellsUsed().Skip(1);      // Exclude header

            // Filter test case IDs (exclude "Random") and collect their corresponding bug IDs
            var file1Ids = testCaseIdCells
                .Where(cell => !cell.GetValue<string>().Equals("Random", StringComparison.OrdinalIgnoreCase))
                .Select(cell => cell.GetValue<string>())
                .ToList();

            var correspondingBugIds = bugIdCells
                .Where(cell => !cell.GetValue<string>().Equals("Random", StringComparison.OrdinalIgnoreCase))
                .Select(cell => cell.GetValue<string>())
                .ToList();

            // Get failed TR IDs and bug IDs from File 2 using the previous function
            var file2Result = FailedTcBugIdFromTr(filepath2, correspondingBugIds);

            // Match IDs between File 1 and File 2
            int matchingCount = file2Result.testCaseIds
                .Count(id => file1Ids.Contains(id));

            // Calculate existing bug count
            int existingBugCount = failedTrCount - matchingCount;

            // Ensure the result is not negative
            return existingBugCount >= 0 ? existingBugCount : 0;
        }
    }
    catch (Exception ex)
    {
        throw new Exception($"Error in CalculateExistingBugCount: {ex.Message}", ex);
    }
}
