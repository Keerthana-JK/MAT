using System;
using System.Collections.Generic;
using ClosedXML.Excel;

public class ExcelProcessor
{
    public static (int rowCount, List<string> bugIds, List<string> testCaseIds) ProcessExcel(string filePath)
    {
        // Initialize lists to hold bug IDs and test case IDs
        var bugIds = new List<string>();
        var testCaseIds = new List<string>();

        try
        {
            // Load the Excel file using ClosedXML
            using (var workbook = new XLWorkbook(filePath))
            {
                var worksheet = workbook.Worksheet(1); // Assuming data is in the first worksheet
                var rows = worksheet.RowsUsed(); // Get all used rows

                // Loop through rows starting from the second row (skip header)
                foreach (var row in rows.Skip(1))
                {
                    var status = row.Cell(2).GetValue<string>();       // Assuming 'status' is in column 2
                    var bugId = row.Cell(3).GetValue<string>();        // Assuming 'bugid' is in column 3
                    var testCaseId = row.Cell(1).GetValue<string>();   // Assuming 'testcaseid' is in column 1

                    // Apply the filtering conditions
                    if (status == "fail" && bugId != "socalledbugid")
                    {
                        bugIds.Add(bugId);
                        testCaseIds.Add(testCaseId);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing Excel file: {ex.Message}");
        }

        // Return the count, bug IDs, and test case IDs
        return (bugIds.Count, bugIds, testCaseIds);
    }
}
