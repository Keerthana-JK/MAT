using ClosedXML.Excel;
using System;
using System.Collections.Generic;
using System.Linq;

namespace RemarksColumnWpfApp.Model
{
    public class ExcelHelper
    {
        // Count failed test cases and get their IDs - Get count and list of test case IDs that are not "Random"
        public static (int Count, List<string> TestCaseIds) FailedTcIdAndCount(string filepath, int sheetIndex, string columnName, string excludeValue)
        {
            try
            {
                using (var workbook = new XLWorkbook(filepath))
                {
                    var worksheet = workbook.Worksheet(sheetIndex);

                    // Get the cells of the test case ID column, excluding the header
                    var testCaseIdCells = worksheet.Column(columnName).CellsUsed().Skip(1);

                    // Filter and select IDs that are not equal to the excludeValue (e.g., "Random")
                    var failedTCIds = testCaseIdCells
                        .Where(cell => !cell.GetValue<string>().Equals(excludeValue, StringComparison.OrdinalIgnoreCase))
                        .Select(cell => cell.GetValue<string>())
                        .ToList();

                    // Return the count and the list of IDs
                    return (failedTCIds.Count, failedTCIds);
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error in FailedTcIdAndCount: {ex.Message}", ex);
            }
        }

        // Count cells that exactly match a specified value in a given column
        public static int BugsCount(string filepath, int sheetIndex, string columnName, string matchValue)
        {
            try
            {
                using (var workbook = new XLWorkbook(filepath))
                {
                    var worksheet = workbook.Worksheet(sheetIndex);

                    // Count cells that exactly match the specified value
                    return worksheet.Column(columnName).CellsUsed().Skip(1).Count(cell =>
                        cell.GetValue<string>().Equals(matchValue, StringComparison.OrdinalIgnoreCase));
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error in BugsCount: {ex.Message}", ex);
            }
        }

        // Get the count of existing open bugs for test case IDs that are not "Random"
        public static int ExistingOpenBugsCount(string filepath, int sheetIndex, string testCaseIdColumn, string bugStatusColumn, string excludeValue, string bugStatusValue)
        {
            try
            {
                using (var workbook = new XLWorkbook(filepath))
                {
                    var worksheet = workbook.Worksheet(sheetIndex);

                    // Get test case IDs that are not equal to the excludeValue
                    var (failedCount, failedTCIds) = FailedTcIdAndCount(filepath, sheetIndex, testCaseIdColumn, excludeValue);

                    // Count rows where the bug status matches for those test case IDs
                    return worksheet.RowsUsed().Skip(1).Count(row =>
                        failedTCIds.Contains(row.Cell(testCaseIdColumn).GetValue<string>(), StringComparer.OrdinalIgnoreCase) &&
                        row.Cell(bugStatusColumn).GetValue<string>().Equals(bugStatusValue, StringComparison.OrdinalIgnoreCase));
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error in ExistingOpenBugsCount: {ex.Message}", ex);
            }
        }
    }
}
