using ClosedXML.Excel;
using System;
using System.Collections.Generic;
using System.Linq;

namespace ExcelComparisonApp
{
    public class ExcelHelper
    {
        public static List<string> ExtractBigIdsFromMantis(string mantisFilePath, int mantisSheetIndex, string testCaseIdColumn, string bigIdColumn, string excludeValue)
        {
            try
            {
                using (var workbook = new XLWorkbook(mantisFilePath))
                {
                    var worksheet = workbook.Worksheet(mantisSheetIndex);

                    // Get Test Case IDs and corresponding Big IDs
                    var bigIds = worksheet.RowsUsed().Skip(1)
                        .Where(row => !row.Cell(testCaseIdColumn).GetValue<string>().Equals(excludeValue, StringComparison.OrdinalIgnoreCase))
                        .Select(row => row.Cell(bigIdColumn).GetValue<string>())
                        .ToList();

                    return bigIds;
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error in ExtractBigIdsFromMantis: {ex.Message}", ex);
            }
        }

        public static int CountFilteredRowsInTr(string trFilePath, int trSheetIndex, string bigIdColumn, List<string> excludedBigIds)
        {
            try
            {
                using (var workbook = new XLWorkbook(trFilePath))
                {
                    var worksheet = workbook.Worksheet(trSheetIndex);

                    // Filter rows in the Big ID column, excluding IDs found in the mantis file
                    var count = worksheet.RowsUsed().Skip(1)
                        .Count(row => !excludedBigIds.Contains(row.Cell(bigIdColumn).GetValue<string>(), StringComparer.OrdinalIgnoreCase));

                    return count;
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error in CountFilteredRowsInTr: {ex.Message}", ex);
            }
        }

        public static int GetFilteredRowCount(string mantisFilePath, int mantisSheetIndex, string mantisTestCaseIdColumn, string mantisBigIdColumn, string excludeValue,
                                              string trFilePath, int trSheetIndex, string trBigIdColumn)
        {
            try
            {
                // Extract Big IDs from mantis.xlsm
                var excludedBigIds = ExtractBigIdsFromMantis(mantisFilePath, mantisSheetIndex, mantisTestCaseIdColumn, mantisBigIdColumn, excludeValue);

                // Count rows in tr.xlsm excluding the extracted Big IDs
                return CountFilteredRowsInTr(trFilePath, trSheetIndex, trBigIdColumn, excludedBigIds);
            }
            catch (Exception ex)
            {
                throw new Exception($"Error in GetFilteredRowCount: {ex.Message}", ex);
            }
        }
    }
}
