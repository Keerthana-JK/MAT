public static int GetExistingBugsRowCountExcludingMatchesAndBlanks(
    string filepath1, int sheetIndex1, string columnName1,
    string filepath2, int sheetIndex2, string testCaseIdColumn, string statusValue, string statusColumn)
{
    try
    {
        // Use FailedTcIdAndCount to get failed test case IDs (Status = Fail)
        var (_, failedTestCaseIds, _) = FailedTcIdAndCount(
            filepath2, sheetIndex2, testCaseIdColumn, "Random", statusColumn);

        // Filter IDs for "Fail" status only
        var failedTestCaseIdsFiltered = failedTestCaseIds
            .Where(id => !string.IsNullOrWhiteSpace(id)) // Exclude blanks
            .ToHashSet(StringComparer.OrdinalIgnoreCase);

        using (var workbook1 = new XLWorkbook(filepath1))
        {
            var worksheet1 = workbook1.Worksheet(sheetIndex1);

            // Get remaining rows count in worksheet1 where IDs are NOT in the failed test case list
            var remainingRowCount = worksheet1
                .Column(columnName1)
                .CellsUsed()
                .Skip(1) // Skip header
                .Count(cell =>
                    !string.IsNullOrWhiteSpace(cell.GetValue<string>()) && // Exclude blanks
                    !failedTestCaseIdsFiltered.Contains(cell.GetValue<string>())); // Exclude failed IDs

            return remainingRowCount;
        }
    }
    catch (Exception ex)
    {
        throw new Exception($"Error in GetExistingBugsRowCountExcludingMatchesAndBlanks: {ex.Message}", ex);
    }
}
