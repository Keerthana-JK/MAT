public static int CalculateExistingBugCount(
    int failedTcCount,                      // Hardcoded failed TC count
    string filepath1, int sheetIndex1,      // File 1 path and sheet index
    string columnName1,                     // Column in File 1 to compare
    string filepath2, int sheetIndex2,      // File 2 path and sheet index
    string columnName2)                     // Column in File 2 to compare
{
    try
    {
        using (var workbook1 = new XLWorkbook(filepath1))
        using (var workbook2 = new XLWorkbook(filepath2))
        {
            // Load worksheets
            var worksheet1 = workbook1.Worksheet(sheetIndex1);
            var worksheet2 = workbook2.Worksheet(sheetIndex2);

            // Get IDs from File 1
            var file1Ids = worksheet1
                .Column(columnName1)
                .CellsUsed()
                .Skip(1) // Skip header
                .Select(cell => cell.GetValue<string>())
                .Where(id => !string.IsNullOrWhiteSpace(id))
                .ToList();

            // Get IDs from File 2
            var file2Ids = worksheet2
                .Column(columnName2)
                .CellsUsed()
                .Skip(1) // Skip header
                .Select(cell => cell.GetValue<string>())
                .Where(id => !string.IsNullOrWhiteSpace(id))
                .ToHashSet(StringComparer.OrdinalIgnoreCase); // Use HashSet for efficient matching

            // Count matching IDs between File 1 and File 2
            int matchingCount = file1Ids.Count(id => file2Ids.Contains(id));

            // Subtract matching count from failedTcCount
            int existingBugCount = failedTcCount - matchingCount;

            // Ensure the result is not negative
            return existingBugCount >= 0 ? existingBugCount : 0;
        }
    }
    catch (Exception ex)
    {
        throw new Exception($"Error in CalculateExistingBugCount: {ex.Message}", ex);
    }
}
