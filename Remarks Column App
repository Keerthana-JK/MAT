ExcelHelper.cs
--------------
using ClosedXML.Excel;
using DocumentFormat.OpenXml.Spreadsheet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace RemarksColumnWpfApp.Model
{
	public class ExcelHelper
	{
		//// Failed TC Count
		//// Count failed test cases and get their IDs - Get count and list of test case IDs that are not "Random"
		//public static (int Count, List<string> TestCaseIds) FailedTcIdAndCount(string filepath, int sheetIndex, string columnName, string value)
		//{
		//	try
		//	{
		//		using (var workbook = new XLWorkbook(filepath))
		//		{
		//			//columnName = "C";
		//			var worksheet = workbook.Worksheet(sheetIndex);

		//			// Get the cells of the test case ID column, excluding the header
		//			var testCaseIdCells = worksheet.Column(columnName).CellsUsed().Skip(1);

		//			// Filter and select IDs that are not equal to the "Random"
		//			var failedTCIds = testCaseIdCells
		//				.Where(cell => !cell.GetValue<string>().Equals(value, StringComparison.OrdinalIgnoreCase))
		//				.Select(cell => cell.GetValue<string>())
		//				.ToList();

		//			// Return the count and the list of IDs
		//			return (failedTCIds.Count, failedTCIds);
		//		}
		//	}
		//	catch (Exception ex)
		//	{
		//		throw new Exception($"Error in FailedTCCountAndIds: {ex.Message}", ex);
		//	}
		//}

		// Failed TC Count and Corresponding Values
		// Count failed test cases, get their IDs, and fetch corresponding values from another column
		public static (int Count, List<string> TestCaseIds, List<string> CorrespondingValues) FailedTcIdAndCount(
			string filepath, int sheetIndex, string testCaseIdColumn, string excludeValue, string targetColumn)
		{
			try
			{
				using (var workbook = new XLWorkbook(filepath))
				{
					var worksheet = workbook.Worksheet(sheetIndex);

					// Get the cells of the test case ID column, excluding the header
					var testCaseIdCells = worksheet.Column(testCaseIdColumn).CellsUsed().Skip(1);

					// Initialize lists to store results
					var failedTCIds = new List<string>();
					var correspondingValues = new List<string>();

					// Iterate through each cell in the test case ID column
					foreach (var cell in testCaseIdCells)
					{
						var testCaseId = cell.GetValue<string>();

						// If the test case ID is not equal to the excludeValue (e.g., "Random")
						if (!testCaseId.Equals(excludeValue, StringComparison.OrdinalIgnoreCase))
						{
							failedTCIds.Add(testCaseId);

							// Fetch the corresponding value from the target column in the same row
							var rowNumber = cell.Address.RowNumber;
							var correspondingValue = worksheet.Cell(rowNumber, targetColumn).GetValue<string>();
							correspondingValues.Add(correspondingValue);
						}
					}

					// Return the count, list of IDs, and corresponding values
					return (failedTCIds.Count, failedTCIds, correspondingValues);
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in FailedTcIdAndCount: {ex.Message}", ex);
			}
		}

		//Existing open bugs count
		public static int ExistingOpenBugsCount(string filepath1, int sheetIndex1, string columnName1, string filepath2, int sheetIndex2, string columnName2, string value)
		{
			try
			{
				using (var workbook1 = new XLWorkbook(filepath1)) 
				using (var workbook2 = new XLWorkbook(filepath2))
				{
					//Data is in the (sheetIndex)th sheet
					var worksheet1 = workbook1.Worksheet(sheetIndex1);
					var worksheet2 = workbook2.Worksheet(sheetIndex2);

					// Get IDs from the 1st file
					var ids1 = worksheet1.Column(columnName1).CellsUsed().Skip(1).Select(cell => cell.GetValue<string>()).ToHashSet(StringComparer.OrdinalIgnoreCase);

					// Get IDs from the 2nd file
					var ids2 = worksheet1.Column(columnName2).CellsUsed().Skip(1).Select(cell => cell.GetValue<string>()).ToList();

					// Count matching IDs between 2 sets
					return ids2.Count(id => ids1.Contains(id));
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in ExistingOpenBugsCount: {ex.Message}", ex);
			}
		}

		//// Random Bugs Count
		//public static int BugsCount(string filepath, int sheetIndex, string columnName, string value)
		//{
		//	try
		//	{
		//		using (var workbook = new XLWorkbook(filepath))
		//		{
		//			// Data is in the (sheetIndex)th sheet
		//			var worksheet = workbook.Worksheet(sheetIndex);

		//			// Get all specified values in the column and count matches
		//			var randomBugCount = worksheet.Column(columnName).CellsUsed();//Fetch only used cells in column

		//			// Count cells that exactly match the specified value
		//			return randomBugCount.Skip(1).Count(cell =>
		//				cell.GetValue<string>().Equals(value, StringComparison.OrdinalIgnoreCase));
		//		}
		//	}
		//	catch (Exception ex)
		//	{
		//		throw new Exception($"Error in RandomBugsCount: {ex.Message}", ex);
		//	}
		//}

		public static List<string> GetBugIdForRandomTcId(string filepath, int sheetIndex, string matchColumnName, string matchValue, string targetColumnName)
		{
			try
			{
				using (var workbook = new ClosedXML.Excel.XLWorkbook(filepath))
				{
					var worksheet = workbook.Worksheet(sheetIndex);

					// Get the column for the match and target
					var matchColumn = worksheet.Column(matchColumnName).CellsUsed().Skip(1); // Skip header
					var targetColumn = worksheet.Column(targetColumnName).CellsUsed().Skip(1); // Skip header

					// Collect the corresponding values
					var matchedValues = new List<string>();
					foreach (var matchCell in matchColumn)
					{
						if (matchCell.GetValue<string>().Equals(matchValue, StringComparison.OrdinalIgnoreCase))
						{
							int rowNumber = matchCell.Address.RowNumber; // Get the row number
							var targetCell = targetColumn.FirstOrDefault(cell => cell.Address.RowNumber == rowNumber);
							if (targetCell != null)
							{
								matchedValues.Add(targetCell.GetValue<string>());
							}
						}
					}

					return matchedValues;
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in GetColumnValuesForMatch: {ex.Message}", ex);
			}
		}
	}
}




DisplayCountViewModel.cs
------------------------

using RemarksColumnWpfApp.Commands;
using RemarksColumnWpfApp.Model;
using System.ComponentModel;
using System.Windows;
using Microsoft.Win32;
using System.Windows.Input;
using System.Text;
using System.Collections.Generic;
using System.Windows.Interop;

namespace RemarksColumnWpfApp.ViewModel
{
	public class DisplayCountViewModel
	{
		//private string _filePath;
		//private string _filePath2;
		//private string _columnName;
		//private string _valueToCount;
		//private int _count;

		//public string FilePath
		//{
		//	get => _filePath;
		//	set { _filePath = value; OnPropertyChanged(nameof(FilePath)); }
		//}
		//public string ColumnName
		//{
		//	get => _columnName;
		//	set { _columnName = value; OnPropertyChanged(nameof(ColumnName)); }
		//}
		//public string ValueToCount
		//{
		//	get => _valueToCount;
		//	set { _valueToCount = value; OnPropertyChanged(nameof(ValueToCount)); }
		//}
		//public int Count
		//{
		//	get => _count;
		//	set { _count = value; OnPropertyChanged(nameof(Count)); }
		//}

		// Property changed notification
		//public event PropertyChangedEventHandler PropertyChanged;
		//protected void OnPropertyChanged(string propertyName)
		//{
		//	PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
		//}

		public ICommand CountCommand { get; }
		public DisplayCountViewModel()
		{
			CountCommand = new RelayCommand(CountValues);
		}

		/// <summary>
		/// 
		/// </summary>
		public int failedTcCount = 0;
		public int existingOpenBugsCount = 0;
		public int randomBugCount = 0;
		public int failedTrCount = 0;

		// File with Bug ID and Test Case ID
		//public readonly string f1 = @"C:\Users\2021454\Downloads\Set1-buglist from mantis in Excel format.xlsm";
		public readonly string f1 = @"C:\Users\2021454\Downloads\Data_Manager_Mantis Exported file Excel.xlsm";

		// File with Test Case ID and Status (Pass/Fail)
		//public readonly string f2 = @"C:\Users\2021454\Downloads\rigaku_easyx_tr.xlsm-rev1089.xlsm";
		public readonly string f2 = @"C:\Users\2021454\Downloads\rigaku_data-manager_regression_tr.xlsm";


		// Column containing Test Case IDs
		public string columnName = "";
		public string value = "";
		public int sheetIndex = 0;
		string targetColumn = ""; // Column to fetch corresponding values

		private void CountValues(object parameter)
		{
			// Column containing Test Case IDs
			columnName = "AC";
			value = "Random";
			sheetIndex = 1;
			targetColumn = "A"; // Column to fetch corresponding values

			string message = ""; 
			string message2 = "";
			string message3 = "";
			// #1 Failed TC count
			if (!string.IsNullOrEmpty(f1) && !string.IsNullOrEmpty(columnName) && !string.IsNullOrEmpty(value) && sheetIndex > 0)
			{
				var result = ExcelHelper.FailedTcIdAndCount(f1, sheetIndex, columnName, value, targetColumn);
				failedTcCount = result.Count;

				Dictionary<string, string> TcIdAndBugId = new Dictionary<string, string>();
				for (int i = 0; i < result.TestCaseIds.Count; i++)
				{
					string tcId = result.TestCaseIds[i];
					string bugId = result.CorrespondingValues[i];

					// Add each mapping to dictionary
					TcIdAndBugId[tcId] = bugId;
				}
				foreach (var kvp in TcIdAndBugId)
				{
					message += $"{kvp.Key} => Bug ID #{kvp.Value}\n"; // Failed TC message
				}
				//MessageBox.Show(message);
			}

			// #2 Random bug count 
			if (!string.IsNullOrEmpty(f1) && !string.IsNullOrEmpty(columnName) && !string.IsNullOrEmpty(value) && sheetIndex>0)
			{
				//randomBugCount = ExcelHelper.BugsCount(f1, sheetIndex, columnName, value);
				var randomTcList = ExcelHelper.GetBugIdForRandomTcId(f1, sheetIndex, columnName, value, targetColumn);
				randomBugCount = randomTcList.Count;
				message2 += string.Join(", #",randomTcList);
			}

			//#3 Existing open bugs count
			columnName = "AC";
			sheetIndex = 1;
			if (!string.IsNullOrEmpty(f2) && !string.IsNullOrEmpty(columnName) && !string.IsNullOrEmpty(value) && sheetIndex > 0)
			{
				//var result = ExcelHelper.FailedTcIdAndCount(f1, sheetIndex, columnName, value);
				//foreach (var id in result.TestCaseIds)
				//{
				//	//MessageBox.Show(id);
				//	value = id;
				//	existingOpenBugsCount = ExcelHelper.BugsCount(f1, sheetIndex, columnName, value);
				//}
				var sheetIndex2 = 5;
				var columnName2 = "C";
				existingOpenBugsCount = ExcelHelper.ExistingOpenBugsCount(f1, sheetIndex, columnName, f2, sheetIndex2, columnName2, value);
			}

			sheetIndex = 7;
			columnName = "H";
			value = "Fail";
			targetColumn = "C";
			if (!string.IsNullOrEmpty(f2) && !string.IsNullOrEmpty(columnName) && !string.IsNullOrEmpty(value) && sheetIndex > 0)
			{
				//randomBugCount = ExcelHelper.BugsCount(f1, sheetIndex, columnName, value);
				var failedTrList = ExcelHelper.GetBugIdForRandomTcId(f2, sheetIndex, columnName, value, targetColumn);
				failedTrCount = failedTrList.Count;
				message3 += string.Join(", ", failedTrList);
			}

			MessageBox.Show($"Failed TC count : {failedTcCount}\n {message}\n" +
				$"Existing open bugs: {existingOpenBugsCount} (Fail TCs: count)  : {failedTcCount}\n\n" + //change var name of failedTcCount
				$"Random bug : {randomBugCount}\n Bug IDs #{message2}\n\n" +
				$"Failed TR : {failedTrCount}\n {message3}", "Result", MessageBoxButton.OK, MessageBoxImage.Information);
		}
	}
}
