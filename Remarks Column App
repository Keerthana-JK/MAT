ExcelHelper.cs
--------------
using ClosedXML.Excel;
using DocumentFormat.OpenXml.Spreadsheet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace RemarksColumnWpfApp.Model
{
	public class ExcelHelper
	{
		// Failed TC Count and Corresponding Values
		// Count failed test cases, get their IDs, and fetch corresponding values from another column
		public static (int Count, List<string> TestCaseIds, List<string> CorrespondingBugId) FailedTcIdAndCount(
			string filepath, int sheetIndex, string testCaseIdColumn, string excludeValue, string targetColumn)
		{
			try
			{
				using (var workbook = new XLWorkbook(filepath))
				{
					var worksheet = workbook.Worksheet(sheetIndex);

					// Get the cells of the test case ID column, excluding the header
					var testCaseIdCells = worksheet.Column(testCaseIdColumn).CellsUsed().Skip(1);

					// Initialize lists to store results
					var failedTCIds = new List<string>();
					var correspondingBugIds = new List<string>();

					// Iterate through each cell in the test case ID column
					foreach (var cell in testCaseIdCells)
					{
						var testCaseId = cell.GetValue<string>();

						// If the test case ID is not equal to the excludeValue (e.g., "Random")
						if (!testCaseId.Equals(excludeValue, StringComparison.OrdinalIgnoreCase))
						{
							failedTCIds.Add(testCaseId);

							// Fetch the corresponding value from the target column in the same row
							var rowNumber = cell.Address.RowNumber;
							var correspondingValue = worksheet.Cell(rowNumber, targetColumn).GetValue<string>();
							correspondingBugIds.Add(correspondingValue);
						}
					}

					// Return the count, list of IDs, and corresponding values
					return (failedTCIds.Count, failedTCIds, correspondingBugIds);
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in FailedTcIdAndCount: {ex.Message}", ex);
			}
		}

		//Existing open bugs count
		public static int ExistingOpenBugsCount(string filepath1, int sheetIndex1, string columnName1, string filepath2, int sheetIndex2, string columnName2, string value)
		{
			try
			{
				using (var workbook1 = new XLWorkbook(filepath1)) 
				using (var workbook2 = new XLWorkbook(filepath2))
				{
					//Data is in the (sheetIndex)th sheet
					var worksheet1 = workbook1.Worksheet(sheetIndex1);
					var worksheet2 = workbook2.Worksheet(sheetIndex2);

					// Get IDs from the 1st file
					var ids1 = worksheet1.Column(columnName1).CellsUsed().Skip(1).Select(cell => cell.GetValue<string>()).ToHashSet(StringComparer.OrdinalIgnoreCase);

					// Get IDs from the 2nd file
					var ids2 = worksheet1.Column(columnName2).CellsUsed().Skip(1).Select(cell => cell.GetValue<string>()).ToList();

					// Count matching IDs between 2 sets
					return ids2.Count(id => ids1.Contains(id));
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in ExistingOpenBugsCount: {ex.Message}", ex);
			}
		}

		//Random bug count
		public static List<string> GetBugIdForRandomTcId(string filepath, int sheetIndex, string matchColumnName, string matchValue, string targetColumnName)
		{
			try
			{
				using (var workbook = new ClosedXML.Excel.XLWorkbook(filepath))
				{
					var worksheet = workbook.Worksheet(sheetIndex);

					// Get the column for the match and target
					var matchColumn = worksheet.Column(matchColumnName).CellsUsed().Skip(1); // Skip header
					var targetColumn = worksheet.Column(targetColumnName).CellsUsed().Skip(1); // Skip header

					// Collect the corresponding values
					var matchedValues = new List<string>();
					foreach (var matchCell in matchColumn)
					{
						if (matchCell.GetValue<string>().Equals(matchValue, StringComparison.OrdinalIgnoreCase))
						{
							int rowNumber = matchCell.Address.RowNumber; // Get the row number
							var targetCell = targetColumn.FirstOrDefault(cell => cell.Address.RowNumber == rowNumber);
							if (targetCell != null)
							{
								matchedValues.Add(targetCell.GetValue<string>());
							}
						}
					}

					return matchedValues;
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in GetColumnValuesForMatch: {ex.Message}", ex);
			}
		}

		///   //////   ////   ///////
		public static int GetExistingBugsRowCountExcludingMatchesAndBlanks(
			string filepath1, int sheetIndex1, string columnName1,
			string filepath2, int sheetIndex2, string columnName2, string statusColumnName, string statusValue)
		{
			try
			{
				using (var workbook1 = new XLWorkbook(filepath1))
				using (var workbook2 = new XLWorkbook(filepath2))
				{
					// Load worksheets
					var worksheet1 = workbook1.Worksheet(sheetIndex1);
					var worksheet2 = workbook2.Worksheet(sheetIndex2);

					// Get IDs from the second file (filtered by Status = "Fail") into a set
					var failedTc = worksheet2
						.RowsUsed()
						.Skip(1) // Skip header row
						.Where(row =>
						{
							var statusCell = row.Cell(statusColumnName);
							return statusCell != null &&
								   statusCell.GetValue<string>().Equals(statusValue, StringComparison.OrdinalIgnoreCase); // Filter rows where Status = "Fail"
						})
						.Select(row => row.Cell(columnName2).GetValue<string>())
						.Where(id => !string.IsNullOrWhiteSpace(id)) // Exclude blank IDs
						.ToHashSet(StringComparer.OrdinalIgnoreCase);

					// Filter IDs for "Fail" status only
					var failedTestCaseIdsFiltered = failedTc
						.Where(id => !string.IsNullOrWhiteSpace(id)) // Exclude blanks
						.ToHashSet(StringComparer.OrdinalIgnoreCase);

					// Get IDs from the first file and exclude matches and blanks
					//var remainingRowCount = worksheet1
					//	.Column(columnName1)
					//	.CellsUsed()
					//	.Skip(1) // Skip header
					//	.Count(cell =>
					//		!string.IsNullOrWhi teSpace(cell.GetValue<string>()) && // Exclude blanks
					//		!failedTc.Contains(cell.GetValue<string>())); // Exclude matches

					// Get remaining rows count in worksheet1 where IDs are NOT in the failed test case list
					var remainingRowCount = worksheet2
						.Column(columnName2)
						.CellsUsed()
						.Skip(1) // Skip header
						.Count(cell =>
							!string.IsNullOrWhiteSpace(cell.GetValue<string>())); // Exclude failed IDs

					return remainingRowCount;
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in GetExistingBugsRowCountExcludingMatchesAndBlanks: {ex.Message}", ex);
			}
		}

		public static int CalculateExistingBugCount(
			int failedTrCount,                      // Hardcoded failed TR count
			string filepath1, int sheetIndex1,      // File 1 path and sheet index
			string columnName1,                     // Column in File 1 to compare
			string filepath2, int sheetIndex2,      // File 2 path and sheet index
			string columnName2)                     // Column in File 2 to compare
		{
			try
			{
				using (var workbook1 = new XLWorkbook(filepath1))
				using (var workbook2 = new XLWorkbook(filepath2))
				{
					// Load worksheets
					var worksheet1 = workbook1.Worksheet(sheetIndex1);
					var worksheet2 = workbook2.Worksheet(sheetIndex2);

					// Get the cells of the test case ID column, excluding the header
					var bugIdColumn = "A";
					var testCaseIdCells = worksheet1.Column(columnName1).CellsUsed().Skip(1);
					var bugIdCells = worksheet1.Column(bugIdColumn).CellsUsed().Skip(1);
					var value = "Random";
					// Filter and select IDs that are not equal to the "Random" and store it in file1Ids
					//var file1Ids = testCaseIdCells
					//	.Where(cell => !cell.GetValue<string>().Equals(value, StringComparison.OrdinalIgnoreCase))
					//	.Select(cell => cell.GetValue<string>())
					//	.ToList(); // get its Bug id

					// Initialize lists to store results
					//var failedTCIds = new List<string>();
					//var correspondingBugId = new List<string>();

					//// Iterate through each cell in the test case ID column
					//foreach (var cell in testCaseIdCells)//file1Ids
					//{
					//	var testCaseId = cell.GetValue<string>();

					//	// If the test case ID is not equal to "Random"
					//	if (!testCaseId.Equals(value, StringComparison.OrdinalIgnoreCase))
					//	{
					//		failedTCIds.Add(testCaseId);

					//		// Fetch the corresponding value from the target column in the same row
					//		var rowNumber = cell.Address.RowNumber;
					//		var correspondingValue = worksheet1.Cell(rowNumber, columnName1).GetValue<string>();
					//		correspondingBugId.Add(correspondingValue);
					//	}
					//}
					// Filter test case IDs (exclude "Random") and collect their corresponding bug IDs
					var file1Ids = testCaseIdCells
						.Where(cell => !cell.GetValue<string>().Equals("Random", StringComparison.OrdinalIgnoreCase))
						.Select(cell => cell.GetValue<string>())
						.ToList();

					var correspondingBugIds = bugIdCells
						.Where(cell => !cell.GetValue<string>().Equals("Random", StringComparison.OrdinalIgnoreCase))
						.Select(cell => cell.GetValue<string>())
						.ToList();


					// Return the count, list of IDs, and corresponding values
					//return (failedTCIds.Count, failedTCIds, correspondingValues);

					var file2Ids = FailedTcBugIdFromTr(filepath2, correspondingBugIds);
					// // // //

					// Initialize lists to hold bug IDs and test case IDs
					var bugIds = new List<string>();
					var testCaseIds = new List<string>();

					string statusColumn = "H";
					string bugIdColumnFromTr = "L";
					string testCaseIdColumn = "C";
					int sheetIndex = 7;

					// Load the Excel file using ClosedXML
					using (var workbook = new XLWorkbook(filepath2))
					{
						var worksheet = workbook.Worksheet(sheetIndex); // Assuming data is in the first worksheet
						var rows = worksheet.RowsUsed().Skip(1); // Get all used rows


						// Loop through rows starting from the second row (skip header)
						foreach (var row in rows.Skip(1))
						{
							var status = row.Cell(statusColumn).GetValue<string>();
							var bugId = row.Cell(bugIdColumnFromTr).GetValue<string>();
							var testCaseId = row.Cell(testCaseIdColumn).GetValue<string>();

							// Apply the filtering conditions
							if (status == "Fail" && !correspondingBugIds.Contains(bugId))
							{
								bugIds.Add(bugId);
								testCaseIds.Add(testCaseId);
							}
						}
					}
					//var failedTrList = ExcelHelper.GetBugIdForRandomTcId(f2, sheetIndex, columnName, value, targetColumn);
					//failedTrCount = failedTrList.Count;

					var a = file2Ids.rowCount;
					var b = file2Ids.bugIds.Count;
					var c = file2Ids.testCaseIds.Count;

					//MessageBox.Show($"{a}\n{b}\n{c}\n");
					// Count matching IDs between File 1 and File 2
					int matchingCount = file2Ids.testCaseIds.Count(id => file1Ids.Contains(id));

					// Subtract (count of Tc ids available in both Mantis and Tr) from failedTcCount (count of status = "Fail" in Tr)
					int existingBugCount = failedTrCount - matchingCount;

					// Ensure the result is not negative
					return existingBugCount >= 0 ? existingBugCount : 0;
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in CalculateExistingBugCount: {ex.Message}", ex);
			}
		}

		// Final 
		public static (int rowCount, List<string> bugIds, List<string> testCaseIds) FailedTcBugIdFromTr(string filePath, List<string> bugIdsMantis)
		{
			// Initialize lists to hold bug IDs and test case IDs
			var bugIds = new List<string>();
			var testCaseIds = new List<string>();

			string statusColumn = "H";
			string bugIdColumn = "L";
			string testCaseIdColumn = "C";
			int sheetIndex = 7;
			try
			{
				// Load the Excel file using ClosedXML
				using (var workbook = new XLWorkbook(filePath))
				{
					var worksheet = workbook.Worksheet(sheetIndex); // Assuming data is in the first worksheet
					var rows = worksheet.RowsUsed().Skip(1); // Get all used rows


					// Loop through rows starting from the second row (skip header)
					foreach (var row in rows.Skip(1))
					{
						var status = row.Cell(statusColumn).GetValue<string>();
						var bugId = row.Cell(bugIdColumn).GetValue<string>();
						var testCaseId = row.Cell(testCaseIdColumn).GetValue<string>();

						// Apply the filtering conditions
						if (status == "Fail" && !bugIdsMantis.Contains(bugId))
						{
							bugIds.Add(bugId);
							testCaseIds.Add(testCaseId);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error processing Excel file: {ex.Message}");
			}

			// Return the count, bug IDs, and test case IDs
			return (bugIds.Count, bugIds, testCaseIds);
		}
	}
}





DisplayCountViewModel.cs
------------------------

using ClosedXML.Excel;
using DocumentFormat.OpenXml.Spreadsheet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace RemarksColumnWpfApp.Model
{
	public class ExcelHelper
	{
		// Failed TC Count and Corresponding Values
		// Count failed test cases, get their IDs, and fetch corresponding values from another column
		public static (int Count, List<string> TestCaseIds, List<string> CorrespondingBugId) FailedTcIdAndCount(
			string filepath, int sheetIndex, string testCaseIdColumn, string excludeValue, string targetColumn)
		{
			try
			{
				using (var workbook = new XLWorkbook(filepath))
				{
					var worksheet = workbook.Worksheet(sheetIndex);

					// Get the cells of the test case ID column, excluding the header
					var testCaseIdCells = worksheet.Column(testCaseIdColumn).CellsUsed().Skip(1);

					// Initialize lists to store results
					var failedTCIds = new List<string>();
					var correspondingBugIds = new List<string>();

					// Iterate through each cell in the test case ID column
					foreach (var cell in testCaseIdCells)
					{
						var testCaseId = cell.GetValue<string>();

						// If the test case ID is not equal to the excludeValue (e.g., "Random")
						if (!testCaseId.Equals(excludeValue, StringComparison.OrdinalIgnoreCase))
						{
							failedTCIds.Add(testCaseId);

							// Fetch the corresponding value from the target column in the same row
							var rowNumber = cell.Address.RowNumber;
							var correspondingValue = worksheet.Cell(rowNumber, targetColumn).GetValue<string>();
							correspondingBugIds.Add(correspondingValue);
						}
					}

					// Return the count, list of IDs, and corresponding values
					return (failedTCIds.Count, failedTCIds, correspondingBugIds);
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in FailedTcIdAndCount: {ex.Message}", ex);
			}
		}

		//Existing open bugs count
		public static int ExistingOpenBugsCount(string filepath1, int sheetIndex1, string columnName1, string filepath2, int sheetIndex2, string columnName2, string value)
		{
			try
			{
				using (var workbook1 = new XLWorkbook(filepath1)) 
				using (var workbook2 = new XLWorkbook(filepath2))
				{
					//Data is in the (sheetIndex)th sheet
					var worksheet1 = workbook1.Worksheet(sheetIndex1);
					var worksheet2 = workbook2.Worksheet(sheetIndex2);

					// Get IDs from the 1st file
					var ids1 = worksheet1.Column(columnName1).CellsUsed().Skip(1).Select(cell => cell.GetValue<string>()).ToHashSet(StringComparer.OrdinalIgnoreCase);

					// Get IDs from the 2nd file
					var ids2 = worksheet1.Column(columnName2).CellsUsed().Skip(1).Select(cell => cell.GetValue<string>()).ToList();

					// Count matching IDs between 2 sets
					return ids2.Count(id => ids1.Contains(id));
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in ExistingOpenBugsCount: {ex.Message}", ex);
			}
		}

		//Random bug count
		public static List<string> GetBugIdForRandomTcId(string filepath, int sheetIndex, string matchColumnName, string matchValue, string targetColumnName)
		{
			try
			{
				using (var workbook = new ClosedXML.Excel.XLWorkbook(filepath))
				{
					var worksheet = workbook.Worksheet(sheetIndex);

					// Get the column for the match and target
					var matchColumn = worksheet.Column(matchColumnName).CellsUsed().Skip(1); // Skip header
					var targetColumn = worksheet.Column(targetColumnName).CellsUsed().Skip(1); // Skip header

					// Collect the corresponding values
					var matchedValues = new List<string>();
					foreach (var matchCell in matchColumn)
					{
						if (matchCell.GetValue<string>().Equals(matchValue, StringComparison.OrdinalIgnoreCase))
						{
							int rowNumber = matchCell.Address.RowNumber; // Get the row number
							var targetCell = targetColumn.FirstOrDefault(cell => cell.Address.RowNumber == rowNumber);
							if (targetCell != null)
							{
								matchedValues.Add(targetCell.GetValue<string>());
							}
						}
					}

					return matchedValues;
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in GetColumnValuesForMatch: {ex.Message}", ex);
			}
		}

		///   //////   ////   ///////
		public static int GetExistingBugsRowCountExcludingMatchesAndBlanks(
			string filepath1, int sheetIndex1, string columnName1,
			string filepath2, int sheetIndex2, string columnName2, string statusColumnName, string statusValue)
		{
			try
			{
				using (var workbook1 = new XLWorkbook(filepath1))
				using (var workbook2 = new XLWorkbook(filepath2))
				{
					// Load worksheets
					var worksheet1 = workbook1.Worksheet(sheetIndex1);
					var worksheet2 = workbook2.Worksheet(sheetIndex2);

					// Get IDs from the second file (filtered by Status = "Fail") into a set
					var failedTc = worksheet2
						.RowsUsed()
						.Skip(1) // Skip header row
						.Where(row =>
						{
							var statusCell = row.Cell(statusColumnName);
							return statusCell != null &&
								   statusCell.GetValue<string>().Equals(statusValue, StringComparison.OrdinalIgnoreCase); // Filter rows where Status = "Fail"
						})
						.Select(row => row.Cell(columnName2).GetValue<string>())
						.Where(id => !string.IsNullOrWhiteSpace(id)) // Exclude blank IDs
						.ToHashSet(StringComparer.OrdinalIgnoreCase);

					// Filter IDs for "Fail" status only
					var failedTestCaseIdsFiltered = failedTc
						.Where(id => !string.IsNullOrWhiteSpace(id)) // Exclude blanks
						.ToHashSet(StringComparer.OrdinalIgnoreCase);

					// Get IDs from the first file and exclude matches and blanks
					//var remainingRowCount = worksheet1
					//	.Column(columnName1)
					//	.CellsUsed()
					//	.Skip(1) // Skip header
					//	.Count(cell =>
					//		!string.IsNullOrWhi teSpace(cell.GetValue<string>()) && // Exclude blanks
					//		!failedTc.Contains(cell.GetValue<string>())); // Exclude matches

					// Get remaining rows count in worksheet1 where IDs are NOT in the failed test case list
					var remainingRowCount = worksheet2
						.Column(columnName2)
						.CellsUsed()
						.Skip(1) // Skip header
						.Count(cell =>
							!string.IsNullOrWhiteSpace(cell.GetValue<string>())); // Exclude failed IDs

					return remainingRowCount;
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in GetExistingBugsRowCountExcludingMatchesAndBlanks: {ex.Message}", ex);
			}
		}

		public static int CalculateExistingBugCount(
			int failedTrCount,                      // Hardcoded failed TR count
			string filepath1, int sheetIndex1,      // File 1 path and sheet index
			string columnName1,                     // Column in File 1 to compare
			string filepath2, int sheetIndex2,      // File 2 path and sheet index
			string columnName2)                     // Column in File 2 to compare
		{
			try
			{
				using (var workbook1 = new XLWorkbook(filepath1))
				using (var workbook2 = new XLWorkbook(filepath2))
				{
					// Load worksheets
					var worksheet1 = workbook1.Worksheet(sheetIndex1);
					var worksheet2 = workbook2.Worksheet(sheetIndex2);

					// Get the cells of the test case ID column, excluding the header
					var bugIdColumn = "A";
					var testCaseIdCells = worksheet1.Column(columnName1).CellsUsed().Skip(1);
					var bugIdCells = worksheet1.Column(bugIdColumn).CellsUsed().Skip(1);
					var value = "Random";
					// Filter and select IDs that are not equal to the "Random" and store it in file1Ids
					//var file1Ids = testCaseIdCells
					//	.Where(cell => !cell.GetValue<string>().Equals(value, StringComparison.OrdinalIgnoreCase))
					//	.Select(cell => cell.GetValue<string>())
					//	.ToList(); // get its Bug id

					// Initialize lists to store results
					//var failedTCIds = new List<string>();
					//var correspondingBugId = new List<string>();

					//// Iterate through each cell in the test case ID column
					//foreach (var cell in testCaseIdCells)//file1Ids
					//{
					//	var testCaseId = cell.GetValue<string>();

					//	// If the test case ID is not equal to "Random"
					//	if (!testCaseId.Equals(value, StringComparison.OrdinalIgnoreCase))
					//	{
					//		failedTCIds.Add(testCaseId);

					//		// Fetch the corresponding value from the target column in the same row
					//		var rowNumber = cell.Address.RowNumber;
					//		var correspondingValue = worksheet1.Cell(rowNumber, columnName1).GetValue<string>();
					//		correspondingBugId.Add(correspondingValue);
					//	}
					//}
					// Filter test case IDs (exclude "Random") and collect their corresponding bug IDs
					var file1Ids = testCaseIdCells
						.Where(cell => !cell.GetValue<string>().Equals("Random", StringComparison.OrdinalIgnoreCase))
						.Select(cell => cell.GetValue<string>())
						.ToList();

					var correspondingBugIds = bugIdCells
						.Where(cell => !cell.GetValue<string>().Equals("Random", StringComparison.OrdinalIgnoreCase))
						.Select(cell => cell.GetValue<string>())
						.ToList();


					// Return the count, list of IDs, and corresponding values
					//return (failedTCIds.Count, failedTCIds, correspondingValues);

					var file2Ids = FailedTcBugIdFromTr(filepath2, correspondingBugIds);
					// // // //

					// Initialize lists to hold bug IDs and test case IDs
					var bugIds = new List<string>();
					var testCaseIds = new List<string>();

					string statusColumn = "H";
					string bugIdColumnFromTr = "L";
					string testCaseIdColumn = "C";
					int sheetIndex = 7;

					// Load the Excel file using ClosedXML
					using (var workbook = new XLWorkbook(filepath2))
					{
						var worksheet = workbook.Worksheet(sheetIndex); // Assuming data is in the first worksheet
						var rows = worksheet.RowsUsed().Skip(1); // Get all used rows


						// Loop through rows starting from the second row (skip header)
						foreach (var row in rows.Skip(1))
						{
							var status = row.Cell(statusColumn).GetValue<string>();
							var bugId = row.Cell(bugIdColumnFromTr).GetValue<string>();
							var testCaseId = row.Cell(testCaseIdColumn).GetValue<string>();

							// Apply the filtering conditions
							if (status == "Fail" && !correspondingBugIds.Contains(bugId))
							{
								bugIds.Add(bugId);
								testCaseIds.Add(testCaseId);
							}
						}
					}
					//var failedTrList = ExcelHelper.GetBugIdForRandomTcId(f2, sheetIndex, columnName, value, targetColumn);
					//failedTrCount = failedTrList.Count;

					var a = file2Ids.rowCount;
					var b = file2Ids.bugIds.Count;
					var c = file2Ids.testCaseIds.Count;

					//MessageBox.Show($"{a}\n{b}\n{c}\n");
					// Count matching IDs between File 1 and File 2
					int matchingCount = file2Ids.testCaseIds.Count(id => file1Ids.Contains(id));

					// Subtract (count of Tc ids available in both Mantis and Tr) from failedTcCount (count of status = "Fail" in Tr)
					int existingBugCount = failedTrCount - matchingCount;

					// Ensure the result is not negative
					return existingBugCount >= 0 ? existingBugCount : 0;
				}
			}
			catch (Exception ex)
			{
				throw new Exception($"Error in CalculateExistingBugCount: {ex.Message}", ex);
			}
		}

		// Final 
		public static (int rowCount, List<string> bugIds, List<string> testCaseIds) FailedTcBugIdFromTr(string filePath, List<string> bugIdsMantis)
		{
			// Initialize lists to hold bug IDs and test case IDs
			var bugIds = new List<string>();
			var testCaseIds = new List<string>();

			string statusColumn = "H";
			string bugIdColumn = "L";
			string testCaseIdColumn = "C";
			int sheetIndex = 7;
			try
			{
				// Load the Excel file using ClosedXML
				using (var workbook = new XLWorkbook(filePath))
				{
					var worksheet = workbook.Worksheet(sheetIndex); // Assuming data is in the first worksheet
					var rows = worksheet.RowsUsed().Skip(1); // Get all used rows


					// Loop through rows starting from the second row (skip header)
					foreach (var row in rows.Skip(1))
					{
						var status = row.Cell(statusColumn).GetValue<string>();
						var bugId = row.Cell(bugIdColumn).GetValue<string>();
						var testCaseId = row.Cell(testCaseIdColumn).GetValue<string>();

						// Apply the filtering conditions
						if (status == "Fail" && !bugIdsMantis.Contains(bugId))
						{
							bugIds.Add(bugId);
							testCaseIds.Add(testCaseId);
						}
					}
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error processing Excel file: {ex.Message}");
			}

			// Return the count, bug IDs, and test case IDs
			return (bugIds.Count, bugIds, testCaseIds);
		}
	}
}
