using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using EmployeeDatabaseApp.Commands;
using EmployeeDatabaseApp.Dialogs;
using EmployeeDatabaseApp.Models;
using System.Windows.Controls;
using System.Globalization;
using Microsoft.Win32;
using System.Xml.Linq;
using System.IO;
using System.Xml;


namespace EmployeeDatabaseApp.ViewModels
{
	public delegate void DWindowClose();
	public class EmployeeViewModel : IDataErrorInfo, INotifyPropertyChanged
	{
		public DWindowClose AddEmployeeDialogClose;
		public DWindowClose EditEmployeeDialogClose;

		private string _id;
		private string _name;
		private string _email;
		private string _designation;
		private string _address;
		private string _photoPath;
		private string _phoneNumber;

		// Dictionary to hold Validation errors
		private readonly Dictionary<string, string> _errors = new Dictionary<string, string>();

		public string Id
		{
			get { return _id; }
			set
			{
				if (_id != value)
				{
					_id = value;
					ValidateProperty(nameof(Id));
					OnPropertyChanged(nameof(Id));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					_name = value;
					ValidateProperty(nameof(Name));
					OnPropertyChanged(nameof(Name));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Email
		{
			get { return _email; }
			set
			{
				if (_email != value)
				{
					_email = value;
					ValidateProperty(nameof(Email));
					OnPropertyChanged(nameof(Email));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}

		public string Designation
		{
			get { return _designation; }
			set
			{
				if (_designation != value)
				{
					_designation = value;
					ValidateProperty(nameof(Designation));
					OnPropertyChanged(nameof(Designation));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Address
		{
			get { return _address; }
			set
			{
				_address = value;
				OnPropertyChanged("Address");
			}
		}
		public string PhotoPath
		{
			get { return _photoPath; }
			set
			{
				_photoPath = value;
				OnPropertyChanged("PhotoPath");
			}
		}
		public string PhoneNumber
		{
			get { return _phoneNumber; }
			set
			{
				_phoneNumber = value;
				ValidateProperty(nameof(PhoneNumber));
				OnPropertyChanged("PhoneNumber");
			}
		}


		private Employee _newEmployee;
		public Employee NewEmployee
		{
			get => _newEmployee;
			set { _newEmployee = value; OnPropertyChanged(nameof(NewEmployee)); }
		}
		private Employee _selectedEmployee;
		public Employee SelectedEmployee
		{
			get { return _selectedEmployee; }
			set
			{
				_selectedEmployee = value;
				OnPropertyChanged(nameof(SelectedEmployee));
			}
		}

		// Profile Image
		private BitmapImage _profileImage;
		public BitmapImage ProfileImage
		{
			get
			{
				return _profileImage;
			}
			set
			{
				_profileImage = value;
				OnPropertyChanged(nameof(ProfileImage));
			}
		}

		private string _selectedPhotoPath;
		public string SelectedPhotoPath
		{
			get { return _selectedPhotoPath; }
			set
			{
				_selectedPhotoPath = value;
				OnPropertyChanged(nameof(SelectedPhotoPath));

				// Update Bitmap whenever path changes
				ProfileImage = !string.IsNullOrEmpty(value) ? new BitmapImage(new Uri(value)) : null;
			}
		}

		private bool _isValid = false;
		public bool IsValid
		{
			get => _isValid;
			private set
			{
				if (_isValid != value)
				{
					_isValid = value;
					OnPropertyChanged(nameof(IsValid)); // Notify UI of validation state changes
				}
			}
		}

		private ObservableCollection<Employee> _employees = null;
		public ObservableCollection<Employee> Employees
		{
			get => _employees;
			set { _employees = value; OnPropertyChanged(nameof(Employees)); }
		}

		// CRUD Commands
		public ICommand CreateCommand { get; }
		public ICommand UpdateCommand { get; }
		public ICommand DeleteCommand { get; }

		// File commands
		public ICommand OpenFileCommand { get; }
		public ICommand SaveFileCommand { get; }
		public ICommand LoadPhotoCommand { get; }

		public EmployeeViewModel()
		{
			this.NewEmployee = new Employee
			{
				Id = "1",
				Name = "Keerthana",
				Email = "kj@gmail.com",
				Designation = "Software Developer",
				Address = "Ernakulam",
				PhoneNumber = "1234567890"
			};

			// Initialise Employee collection
			this.Employees = new ObservableCollection<Employee>
			{
				new Employee { Id = "1", Name = "Keerthana", Email = "kj@gmail.com", Designation = "Software Developer", Address = "Ernakulam", PhoneNumber = "1234567890", PhotoPath=@"C:\Users\2021454\Downloads\Obama" },
				new Employee { Id = "2", Name = "Keerthana", Email = "kj@gmail.com", Designation = "Software Developer", Address = "Ernakulam", PhoneNumber = "1234567890", PhotoPath=@"C:\Users\2021454\Downloads\Obama" }
			};

			CreateCommand = new RelayCommand(Create);
			UpdateCommand = new RelayCommand(Update);
			DeleteCommand = new RelayCommand(Delete);

			// Initialise with a new Employee object
			NewEmployee = new Employee();

			OpenFileCommand = new RelayCommand(OpenFile);
			SaveFileCommand = new RelayCommand(SaveFile);

			// Load Profile Picture
			LoadPhotoCommand = new RelayCommand(LoadPhoto);
		}

		public void Create()
		{
			// ID increment logic (can be implemented)
			//string id = (Employees.Count + 1).ToString();

			// Allow user to pick a photo
			NewEmployee.PhotoPath = PhotoPath;

			Employee newEmployee = new Employee
			{
				Id = NewEmployee.Id,
				Name = NewEmployee.Name,
				Email = NewEmployee.Email,
				PhoneNumber = NewEmployee.PhoneNumber,
				Address = NewEmployee.Address,
				Designation = NewEmployee.Designation,
				ProfileImage = NewEmployee.ProfileImage,
				PhotoPath = NewEmployee.PhotoPath   //NewEmployee.PhotoPath,
			};
			var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);
			if (result != MessageBoxResult.Yes)
			{
				return;
			}
			SavePhotoForEmployee(NewEmployee.PhotoPath, Id);
			Employees.Add(newEmployee);
			//NewEmployee = new Employee();
			
			result = MessageBox.Show(messageBoxText: "Created Successfully",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
			if (result == MessageBoxResult.OK)
			{
				// Close the window
				WindowConfig.addEmployeeDialog.Close();
			}

			//Clear NewEmployee for next entry
			this.NewEmployee = new Employee
			{
				Id = "0",
				Name = " ",
				Email = " ",
				Designation = " ",
				Address = " ",
				PhoneNumber = " ",
				PhotoPath = " "
			};


		}
		public void Update()
		{
			if (this.SelectedEmployee == null)
			{
				return;
			}
			this.SelectedEmployee = this.SelectedEmployee;
			var result = MessageBox.Show(messageBoxText: "Updated Successfully",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
			if (result == MessageBoxResult.OK)
			{
				// Close the window
				WindowConfig.editEmployeeDialog.Close();
			}
		}

		public void Delete()
		{
			
			if (SelectedEmployee == null)
			{
				var result = MessageBox.Show(messageBoxText: "Please select an employee to delete",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
				return;
			}
			if (SelectedEmployee != null)
			{
				var employeeCount = Employees.Count();
				var result = MessageBox.Show(messageBoxText: "Are you sure to delete?",
					caption: "Warning",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Information);
				if (result != MessageBoxResult.Yes)
				{
					return;
				}
				else
				{
					Employees.Remove(SelectedEmployee);
					if(Employees.Count() == employeeCount - 1)
					result = MessageBox.Show(messageBoxText: "Deleted successfully",
						caption: "Alert",
						button: MessageBoxButton.OK,
						icon: MessageBoxImage.Information);
					SelectedEmployee = null;

				}
			}
		}

		
		// Property to control Add button
		// Enabled if no error exists
		//public bool IsButtonEnabled => !_errors.Any();

		// Centralized validation method
		public void ValidateProperty(string propertyName)
		{
			string error = string.Empty;
			switch (propertyName)
			{
				case nameof(Id):
					error = string.IsNullOrEmpty(Id) ? "ID is required" : null;
					break;
				case nameof(Name):
					error = string.IsNullOrEmpty(Name) ? "Name is required" : null;
					break;
				case nameof(Email):
					if (string.IsNullOrEmpty(Email))
					{
						error = "Email is required";
					}
					else if (!IsValidEmail(Email))
					{
						error = "Invalid email format";
					}
					break;
				case nameof(Designation):
					error = string.IsNullOrEmpty(Designation) ? "Designation is required" : null;
					break;
				case nameof(PhoneNumber):
					if (string.IsNullOrEmpty(PhoneNumber))
					{
						error = "Phone Number is required";
					}
					else if (!IsValidPhoneNumber(PhoneNumber))
					{
						error = "Phone Number must be 10 digits ";
					}
					break;
			}

			if (error != null)
			{
				_errors[propertyName] = error;
			}
			else
			{
				_errors.Remove(propertyName);
			}

			// Update the overall validation state
			IsValid = _errors.Count == 0;

			// Notify UI of error changes
			OnPropertyChanged(nameof(Error));
		}

		// Method to validate email format
		private bool IsValidEmail(string email)
		{
			string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
			return Regex.IsMatch(email, emailPattern);
		}

		// Method to validate phone number format
		private bool IsValidPhoneNumber(string phoneNumber)
		{
			string phonePattern = @"^\d{10}$";
			return Regex.IsMatch(phoneNumber, phonePattern);
		}

		public string Error => _errors.Any() ? "Please fix the errors" : null;

		// Button enabling condition
		public bool IsButtonEnabled => string.IsNullOrEmpty(this[nameof(Email)]) && string.IsNullOrEmpty(this[nameof(PhoneNumber)])
			&& string.IsNullOrEmpty(this[nameof(Id)]) && string.IsNullOrEmpty(this[nameof(Designation)]);

		public string this[string columnName] => _errors.ContainsKey(columnName) ? _errors[columnName] : null;

		// Property changed notification
		public event PropertyChangedEventHandler PropertyChanged;
		protected void OnPropertyChanged(string propertyName)
		{
			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
		}

		// Method to load the image (after file selection)
		public void LoadPhoto()
		{
			// Filter to allow only Image files
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "Image files (*.jpg;*.jpeg;*.png)|*.jpg;*.jpeg;*.png|All files (*.*)|*.*",
				Title = "Select a Photo"
			};
			// Show the dialog and check if the user selected a file
			if (openFileDialog.ShowDialog() == true)
			{
				//Convert selected file path to Uri and store it
				PhotoPath =openFileDialog.FileName; //Store the selected photo path
				//ProfileImage = new BitmapImage(new Uri(PhotoPath));
				ProfileImage = new BitmapImage(new Uri(PhotoPath));
			}
		}

		//Method to save selected photo to designated folder
		public void SavePhotoForEmployee(string sourcePhotoPath, string Id)
		{
			string destinationFolder = @"C:\Users\2021454\source\repos\EmployeeDatabaseApp\EmployeeDatabaseApp\ProfilePictures\";
			if (!Directory.Exists(destinationFolder))
			{
				Directory.CreateDirectory(destinationFolder);
			}
			// Unique destination path for employee photo
			string destinationPhotoPath = Path.Combine(destinationFolder, $"employee_{SelectedEmployee.Id}.jpg");

			// Copy file to destination folder
			File.Copy(sourcePhotoPath, destinationPhotoPath, overwrite: true); //true to overwrite if it exists

			// Update PhotoPath to new unique path
			PhotoPath = destinationPhotoPath;
			OnPropertyChanged(nameof(PhotoPath));
		}

		// File
		private void OpenFile()
		{
			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.*"
			};

			if (openFileDialog.ShowDialog() == true)
			{
				string filePath = openFileDialog.FileName;
				if (IsValidXmlFile(filePath, out string errorMessage))
				{
					// Proceed with importing the XML file
					LoadEmployees(filePath);
				}
				else
				{
					// Show an error message if the file is invalid
					MessageBox.Show(errorMessage, "Invalid File", MessageBoxButton.OK, MessageBoxImage.Error);
				}
			}
		}
		private void SaveFile()
		{
			SaveFileDialog saveFileDialog = new SaveFileDialog
			{
				Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.*",
				DefaultExt = "xml"
			};

			if (saveFileDialog.ShowDialog() == true)
			{
				string filePath = saveFileDialog.FileName;
				SaveEmployees(filePath);
			}
		}

		private void SaveEmployees(string filePath)
		{
			try
			{
				XDocument xmlDoc = new XDocument(
					new XElement("AddEmployee",
						from employee in Employees
						select new XElement("Employee",
							new XElement("ID", employee.Id),
							new XElement("Name", employee.Name),
							new XElement("Email", employee.Email),
							new XElement("Designation", employee.Designation),
							new XElement("PhoneNumber", employee.PhoneNumber),
							new XElement("PhotoPath", employee.PhotoPath),
							new XElement("Address", employee.Address)

						)
					)
				);

				xmlDoc.Save(filePath);
				var result = MessageBox.Show("Exported Successfully",
					caption: "Information",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
			}
			catch(Exception ex)
			{
				MessageBox.Show($"Error saving employees in XML file: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
			}
		}

		private void LoadEmployees(string filePath)
		{
			var result = MessageBox.Show(messageBoxText: "Are you sure? The current table will be cleared",
			caption: "Confirm",
			button: MessageBoxButton.OKCancel,
			icon: MessageBoxImage.Question);
			if (result == MessageBoxResult.OK)
			{

				try
				{
					//Clear existing data in grid
					Employees.Clear();
					XDocument xmlDoc = XDocument.Load(filePath);
					var employees = xmlDoc.Descendants("Employee");

					foreach (var employee in employees)
					{
						Employees.Add(new Employee
						{
							Id = employee.Element("ID")?.Value,
							Name = employee.Element("Name")?.Value,
							Email = employee.Element("Email")?.Value,
							Designation = employee.Element("Designation")?.Value,
							PhoneNumber = employee.Element("PhoneNumber")?.Value,
							Address = employee.Element("Address")?.Value,
							PhotoPath = employee.Element("PhotoPath")?.Value,
						});
					}
				}
				catch (Exception ex)
				{
					MessageBox.Show($"Error loading employees in XML file: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
				}
			}
		}
		private bool IsValidXmlFile(string filePath, out string errorMessage)
		{
			errorMessage = string.Empty;
			try
			{
				// Try to load the XML file
				XmlDocument xmlDoc = new XmlDocument();
				xmlDoc.Load(filePath);
				return true;
			}
			catch (XmlException)
			{
				// If an XmlException occurs, the file is not a valid XML file
				errorMessage = "Invalid XML file";
				return false;
			}
			catch (FileNotFoundException)
			{
				// If a FileNotFoundException occurs, the file does not exist
				errorMessage = "The selected file was not found.";
				return false;
			}
			catch (Exception ex)
			{
				// Catch any other exceptions and return false
				errorMessage = "An unexpected error occurred: " + ex.Message;
				return false;
			}
		}

	}
}



<Window x:Class="EmployeeDatabaseApp.Dialogs.EditEmployeeDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:EmployeeDatabaseApp.Dialogs" xmlns:viewmodels="clr-namespace:EmployeeDatabaseApp.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:EmployeeViewModel}"
		mc:Ignorable="d"
        Title="Edit Employee" Height="450" Width="800" Closing="Window_Closing">
    <Grid>
		<TextBlock x:Name="lblEditEmployee" Height="57" Margin="50,23,75,354" TextWrapping="Wrap" Text="Edit Employee" Width="675" FontSize="24" FontFamily="Verdana" FontWeight="Bold" TextAlignment="Center"/>
		<StackPanel Width="650" Margin="101,196,49,31">
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblId" Text="ID:" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtId" Text="{Binding SelectedEmployee.Id, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" IsEnabled="False" FontSize="16"></TextBox>
				<TextBlock Text="*" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblName" Text="Name:" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtName" Text="{Binding SelectedEmployee.Name, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" IsEnabled="False" Width="300" FontSize="16"></TextBox>
				<TextBlock Text="*" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblEmail" Text="Email:" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtEmail" Text="{Binding SelectedEmployee.Email, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16"></TextBox>
				<TextBlock Text="*" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblDesignation" Text="Designation:" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtDesignation" Text="{Binding SelectedEmployee.Designation, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16"></TextBox>
				<TextBlock Text="*" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock Text="Address:" Width="278" FontSize="16"></TextBlock>
				<TextBox Text="{Binding SelectedEmployee.Address, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16"></TextBox>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblPhoneNumber" Text="Phone Number:" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtPhoneNumber" Text="{Binding SelectedEmployee.PhoneNumber, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16"></TextBox>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblPicture" Text="Picture:" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtPicture" Text="{Binding SelectedEmployee.PhotoPath, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="230" FontSize="16"></TextBox>
				<Button x:Name="btnLoadPicture" Content="Add pic..." Width="70" FontSize="14" Click="btnLoadPicture_Click"/>
			</StackPanel>
		</StackPanel>
		<StackPanel Orientation="Horizontal" Height="30" Margin="658,382,50,22">
			<Button x:Name="btnEdit" Content="Edit" Width="71" FontSize="16" Command="{Binding UpdateCommand}"/>
		</StackPanel>
		<Image x:Name="imgPicture" Source="{Binding SelectedEmployee.PhotoPath}" Height="113" Margin="320,75,357,246" Width="123" />
	</Grid>
</Window>






<Window x:Class="EmployeeDatabaseApp.MainWindow" WindowState="Maximized"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:EmployeeDatabaseApp" xmlns:viewmodels="clr-namespace:EmployeeDatabaseApp.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:EmployeeViewModel}"
		mc:Ignorable="d"
        Title="Employee Database" Height="450" Width="800" Closed="Window_Closed">
	<Grid>
		<StackPanel Margin="0,0,0,413">
			<Menu VerticalAlignment="Top">
				<MenuItem x:Name="mnuFile" Header="_File">
					<MenuItem x:Name="mnuImport" Header="_Import" Command="{Binding OpenFileCommand}" />
					<MenuItem x:Name="mnuExport" Header="_Export" Command="{Binding SaveFileCommand}"/>
					<Separator/>
					<MenuItem x:Name="mnuExit" Header="E_xit"/>
				</MenuItem>
			</Menu>
		</StackPanel>
		<StackPanel Margin="0,1,0,326">
			<TextBlock x:Name="lblEmployeeDatabase" Height="52" Margin="131,56,142,0" TextWrapping="Wrap" Text="Employee Database" VerticalAlignment="Top" Width="527" FontSize="24" FontFamily="Verdana" FontWeight="Bold" TextAlignment="Center"/>
		</StackPanel>
		<StackPanel Orientation="Horizontal" Margin="0,0,-11,217" VerticalAlignment="Center" HorizontalAlignment="Center" Height="211" Width="761">
			<Button x:Name="btnAdd" Height="30" Margin="588,174,0,0" VerticalAlignment="Top" Width="41" Click="btnAdd_Click">
				<Button.Background>
					<ImageBrush ImageSource="/8201370_add_plus_button_ui_new_icon.png"/>
				</Button.Background>
			</Button>
			<Button x:Name="btnDelete" Height="30" Margin="10,174,0,0" VerticalAlignment="Top" Width="41" Command="{Binding DeleteCommand}" Click="btnDelete_Click">
				<Button.Background>
					<ImageBrush ImageSource="/619539_close_delete_dismiss_exit_cancel_icon.png"/>
				</Button.Background>
			</Button>
			<Button x:Name="btnEdit" Height="30" Margin="10,174,0,0" VerticalAlignment="Top" Width="41" Click="btnEdit_Click">
				<Button.Background>
					<ImageBrush ImageSource="/11928482.png"/>
				</Button.Background>
			</Button>
		</StackPanel>

		<DataGrid x:Name="dgEmployeeList" Height="196" Margin="43,209,37,29" Width="720" ItemsSource="{Binding Employees}" 
          SelectedItem="{Binding SelectedEmployee}" 
          IsReadOnly="True" 
		  Background="SkyBlue"
          AutoGenerateColumns="False">
			<DataGrid.Columns>
				<DataGridTextColumn Header="Name" Width="*" Binding="{Binding Name}"/>
				<DataGridTextColumn Header="Email" Width="*" Binding="{Binding Email}"/>
				<DataGridTextColumn Header="Designation" Width="*" Binding="{Binding Designation}"/>
			</DataGrid.Columns>
			<!--Tooltip for each datagrid row-->
			<DataGrid.RowStyle>
				<Style TargetType="DataGridRow">
					<Setter Property="ToolTip">
						<Setter.Value>
							<ToolTip>
								<StackPanel>
									<!-- Profile Picture-->
									<Image Width="80" Height="80" Source="{Binding PhotoPath}"
										   ToolTipService.Placement="Mouse" 
										   ToolTipService.PlacementTarget="{Binding ElementName=dgEmployeeList}"/>
									
									<!-- Employee ID -->
									<TextBlock Text="Employee ID:" FontWeight="Bold" />
									<TextBlock Text="{Binding Id}" />

									<!-- Name -->
									<TextBlock Text="Name:" FontWeight="Bold" />
									<TextBlock Text="{Binding Name}" />

									<!-- Email -->
									<TextBlock Text="Email:" FontWeight="Bold" />
									<TextBlock Text="{Binding Email}" />

									<!-- Designation -->
									<TextBlock Text="Designation:" FontWeight="Bold" />
									<TextBlock Text="{Binding Designation}" />

									<!-- Address -->
									<TextBlock Text="Address:" FontWeight="Bold" />
									<TextBlock Text="{Binding Address}" />

									<!-- Phone Number -->
									<TextBlock Text="Phone Number:" FontWeight="Bold" />
									<TextBlock Text="{Binding PhoneNumber}" />
									
								</StackPanel>
							</ToolTip>
						</Setter.Value>
					</Setter>
					
				</Style>
			</DataGrid.RowStyle>

		</DataGrid>
	</Grid>
</Window>




<Window x:Class="EmployeeDatabaseApp.Dialogs.AddEmployeeDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:EmployeeDatabaseApp.Dialogs" xmlns:viewmodels="clr-namespace:EmployeeDatabaseApp.ViewModels" xmlns:models="clr-namespace:EmployeeDatabaseApp.Models" d:DataContext="{d:DesignInstance Type=viewmodels:EmployeeViewModel}"
		mc:Ignorable="d"
        Title="Add Employee" Height="450" Width="800" WindowStartupLocation="CenterScreen" Closing="Window_Closing">
	<Window.Resources>
		<Style TargetType="TextBox" x:Key="EmailTextBoxStyle">
			<Setter Property="BorderBrush" Value="Gray"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Style.Triggers>
				<Trigger Property="Validation.HasError" Value="true">
					<Setter Property="BorderBrush" Value="Red"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	</Window.Resources>
	
	<Grid>
		<TextBlock x:Name="lblAddEmployee" Height="57" Margin="50,23,75,354" TextWrapping="Wrap" Text="Add Employee" Width="675" FontSize="24" FontFamily="Verdana" FontWeight="Bold" TextAlignment="Center"/>
		<StackPanel Width="650" Margin="101,196,49,31">
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblId" Text="ID" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtId" Text="{Binding NewEmployee.Id, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16" >
					<TextBox.Style>
						<StaticResource ResourceKey="EmailTextBoxStyle"/>
					</TextBox.Style>
				</TextBox>
				<TextBlock Text="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblName" Text="Name" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtName" Text="{Binding NewEmployee.Name, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16">
					<TextBox.Style>
						<StaticResource ResourceKey="EmailTextBoxStyle"/>
					</TextBox.Style>
				</TextBox>
				<TextBlock Text="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblEmail" Text="Email" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtEmail" Text="{Binding NewEmployee.Email, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16">
					<TextBox.Style>
						<StaticResource ResourceKey="EmailTextBoxStyle"/>
					</TextBox.Style>
				</TextBox>
				<TextBlock Text="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblDesignation" Text="Designation" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtDesignation" Text="{Binding NewEmployee.Designation, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16">
					<TextBox.Style>
						<StaticResource ResourceKey="EmailTextBoxStyle"/>
					</TextBox.Style>
				</TextBox>
				<TextBlock Text="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock Text="Address" Width="279" FontSize="16"></TextBlock>
				<TextBox Text="{Binding NewEmployee.Address, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16"></TextBox>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblPhoneNumber" Text="Phone Number" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtPhoneNumber" Text="{Binding NewEmployee.PhoneNumber, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="300" FontSize="16">
					<TextBox.Style>
						<StaticResource ResourceKey="EmailTextBoxStyle"/>
					</TextBox.Style>
				</TextBox>
				<TextBlock Text="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" Foreground="Red" Width="30" FontSize="20"></TextBlock>
			</StackPanel>
			<StackPanel Orientation="Horizontal" Height="25">
				<TextBlock x:Name="lblPicture" Text="Picture" Width="280" FontSize="16"></TextBlock>
				<TextBox x:Name="txtPicture" Text="{Binding NewEmployee.PhotoPath, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="230" FontSize="16"></TextBox>
				<Button x:Name="btnLoadPicture" Content="Add pic..." Command="{Binding LoadPhotoCommand}" Width="70" FontSize="14"/>
			</StackPanel>
		</StackPanel>
		<StackPanel Orientation="Horizontal" Height="30" Margin="658,382,50,22">
			<Button x:Name="btnAdd" Content="Add" Width="71" FontSize="16" Command="{Binding CreateCommand}" IsEnabled="{Binding IsButtonEnabled}"/>
		</StackPanel>
		<Image x:Name="imgPicture" Source="{Binding NewEmployee.PhotoPath}" Height="113" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="320,75,357,246" Width="123" />


	</Grid>
</Window>
