using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MATProject.Orm;
using MATProject.Repo;
using MATProject.Entities;
namespace MATProject.ViewModels
{
	public class MedicationScheduleViewModel:INotifyPropertyChanged
    {
        

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        public MedicationScheduleViewModel()
        {
            LoadMedications();

        }
        public void LoadMedications()
        {
            //Medications = MedicationSchedulesRepo.ReadAll();

        }

    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MATProject.Repo;
using MATProject.Entities;
using System.Collections.ObjectModel;
using System.Security.Principal;


namespace MATProject.Orm
{
    public class MedicationSchedulesRepo:IMedicationSchedulesRepo
    {

        private readonly MatDbEntities _context;
        private static MedicationSchedulesRepo _instance;
		private ObservableCollection<Medication> medications;
		public MedicationSchedulesRepo()
        {
            _context = new MatDbEntities();
        }
        public static MedicationSchedulesRepo Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new MedicationSchedulesRepo();
                }
                return _instance;
            }
        }

        public ObservableCollection<Medication> ReadAll()
        {
            return new ObservableCollection<Medication>(_context.Medications.ToList());
		}

		public void Update(Medication medication)
		{
			try
			{
				var existingMedication = medications.FirstOrDefault(a => a.MedicationID == medication.MedicationID);
				if (existingMedication != null)
				{
					existingMedication.StartDate = medication.StartDate;
					existingMedication.EndDate = medication.EndDate;
					existingMedication.Dosage = medication.Dosage;
					existingMedication.Frequency = medication.Frequency;
				}
				else
				{
					throw new Exception("Account doesn't exists");
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}

		}
	}
}
