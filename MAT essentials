using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using EmployeeDatabaseApp.Commands;
using EmployeeDatabaseApp.Models;

namespace EmployeeDatabaseApp.ViewModels
{
	public delegate void DWindowClose();
	public class EmployeeViewModel : IDataErrorInfo, INotifyPropertyChanged
	{
		public DWindowClose AddEmployeeDialogClose;
		public DWindowClose EditEmployeeDialogClose;

		private Employee _newEmployee;

		private string _id;
		private string _name;
		private string _email;
		private string _designation;
		private string _address;
		private string _photoPath;
		private string _phoneNumber;

		// Dictionary to hold Validation errors
		private readonly Dictionary<string, string> _errors = new Dictionary<string, string>();

		public string Id
		{
			get { return _id; }
			set
			{
				if (_id != value)
				{
					_id = value;
					ValidateProperty(nameof(Id));
					OnPropertyChanged(nameof(Id));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					_name = value;
					ValidateProperty(nameof(Name));
					OnPropertyChanged(nameof(Name));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Email
		{
			get { return _email; }
			set
			{
				if (_email != value)
				{
					_email = value;
					ValidateProperty(nameof(Email));
					OnPropertyChanged(nameof(Email));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}

		public string Designation
		{
			get { return _designation; }
			set
			{
				if (_designation != value)
				{
					_designation = value;
					ValidateProperty(nameof(Designation));
					OnPropertyChanged(nameof(Designation));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Address
		{
			get { return _address; }
			set
			{
				_address = value;
				OnPropertyChanged("Address");
			}
		}
		public string PhotoPath
		{
			get { return _photoPath; }
			set
			{
				_photoPath = value;
				OnPropertyChanged("PhotoPath");
			}
		}
		public string PhoneNumber
		{
			get { return _phoneNumber; }
			set
			{
				_phoneNumber = value;
				ValidateProperty(nameof(PhoneNumber));
				OnPropertyChanged("PhoneNumber");
			}
		}
		public Employee NewEmployee
		{
			get => _newEmployee;
			set { _newEmployee = value; OnPropertyChanged(nameof(NewEmployee)); }
		}
		private Employee _selectedEmployee;
		public Employee SelectedEmployee
		{
			get { return _selectedEmployee; }
			set
			{
				_selectedEmployee = value;
				OnPropertyChanged(nameof(SelectedEmployee));
			}
		}

		private ObservableCollection<Employee> _employees = null;
		public ObservableCollection<Employee> Employees
		{
			get => _employees;
			set { _employees = value; OnPropertyChanged(nameof(Employees)); }
		}

		public ICommand CreateCommand { get; }
		public ICommand UpdateCommand { get; }
		public ICommand DeleteCommand { get; }

		public EmployeeViewModel()
		{
			Employees=new ObservableCollection<Employee>();

			// Initialise with a new Employee object
			SelectedEmployee = new Employee();

			this.NewEmployee = new Employee { Id="1", Name="Keerthana", Email="kj@gmail.com", 
				Designation="Software Developer", Address="Ernakulam", PhoneNumber="1234567890"};
			this.Employees = new ObservableCollection<Employee>
			{
				new Employee{Id="1", Name="Keerthana", Email="kj@gmail.com",
				Designation="Software Developer", Address="Ernakulam", PhoneNumber="1234567890"},
			};
			CreateCommand = new RelayCommand(ExecuteCreate, CanExecuteCreate);
			//TODO*************************************
			//UpdateCommand = new RelayCommand(Update);
			//DeleteCommand = new RelayCommand(Delete);
		}

		public void Create()
		{
			string id = "1";
			if (Employees.Count > 0)
			{
				id = Employees[Employees.Count - 1].Id + 1;
			}
			Employee newEmployee = new Employee
			{
				Id = id,
				Name = NewEmployee.Name,
				Email = NewEmployee.Email,
				PhoneNumber = NewEmployee.PhoneNumber,
				Address = NewEmployee.Address,
				Designation = NewEmployee.Designation,
				ProfileImage = NewEmployee.ProfileImage,
				PhotoPath = NewEmployee.PhotoPath,
			};
			var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);
			if (result != MessageBoxResult.Yes)
			{
				return;
			}
			Employees.Add(newEmployee);
			this.NewEmployee = new Employee {
				Id = "0",
				Name = " ",
				Email = " ",
				Designation = " ",
				Address = " ",
				PhoneNumber = " "
			};
			result = MessageBox.Show(messageBoxText: "Created Successfully",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
			if (AddEmployeeDialogClose != null)
			{
				AddEmployeeDialogClose();
			}

		}
		public void AddEmployee()
		{
			Employees.Add(SelectedEmployee);
			// Reset after adding
			SelectedEmployee = new Employee();
			// Notify UI to refresh the form
			OnPropertyChanged(nameof(SelectedEmployee));
		}

		// Profile Image
		private BitmapImage _profileImage;
		public BitmapImage ProfileImage
		{
			get
			{
				return _profileImage;
			}
			set
			{
				_profileImage = value;
				OnPropertyChanged("ProfileImage");
			}
		}

		// Property to control Add button
		// Enabled if no error exists
		public bool IsButtonEnabled => !_errors.Any();

		// Centralized validation method
		private void ValidateProperty(string propertyName)
		{
			string error = string.Empty;
			switch (propertyName)
			{
				case nameof(Id):
					error = string.IsNullOrEmpty(Id) ? "ID is required" : null;
					break;
				case nameof(Name):
					error = string.IsNullOrEmpty(Name) ? "Name is required" : null;
					break;
				case nameof(Email):
					if (string.IsNullOrEmpty(Email))
					{
						error = "Email is required";
					}
					else if (!IsValidEmail(Email))
					{
						error = "Invalid email format";
					}
					break;
				case nameof(Designation):
					error = string.IsNullOrEmpty(Designation) ? "Designation is required" : null;
					break;
				case nameof(PhoneNumber):
					if (string.IsNullOrEmpty(PhoneNumber))
					{
						error = "Phone Number is required";
					}
					else if (!IsValidPhoneNumber(PhoneNumber))
					{
						error = "Phone Number must be 10 digits ";
					}
					break;
			}

			if (error != null)
			{
				_errors[propertyName] = error;
			}
			else
			{
				_errors.Remove(propertyName);
			}

			// Notify UI of error changes
			OnPropertyChanged(nameof(Error));
		}

		// Method to validate email format
		private bool IsValidEmail(string email)
		{
			string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
			return Regex.IsMatch(email, emailPattern);
		}

		// Method to validate phone number format
		private bool IsValidPhoneNumber(string phoneNumber)
		{
			string phonePattern = @"^\d{10}$";
			return Regex.IsMatch(phoneNumber, phonePattern);
		}

		public string Error => _errors.Any() ? "Please fix the errors" : null;



		public string this[string columnName] => _errors.ContainsKey(columnName) ? _errors[columnName] : null;

		// Property changed notification
		public event PropertyChangedEventHandler PropertyChanged;
		protected void OnPropertyChanged(string propertyName)
		{
			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
		}

		// Method to load the image (after file selection)
		public void LoadImage(string imagePath)
		{
			ProfileImage = new BitmapImage(new Uri(imagePath));
		}
	}
}
