public partial class MedicationSchedule
{
    // Other properties...
    
    public string ScheduledTime { get; set; } // Store the time as a string like "1-0-1"

    // New property for MedicationTiming object
    public MedicationTiming MedicationTiming { get; set; }

    // Constructor
    public MedicationSchedule()
    {
        this.CheckIns = new HashSet<CheckIn>();
        this.Reminders = new HashSet<Reminder>();
        MedicationTiming = new MedicationTiming();
    }
    
    // Method to set timing from ScheduledTime string
    public void SetMedicationTimingFromScheduledTime()
    {
        if (!string.IsNullOrEmpty(ScheduledTime))
        {
            MedicationTiming.SetTiming(ScheduledTime);
        }
    }
}







public class MedicationScheduleViewModel : INotifyPropertyChanged
{
    // Properties
    private ObservableCollection<MedicationSchedule> _medicationSchedule;
    public ObservableCollection<MedicationSchedule> MedicationSchedules
    {
        get => _medicationSchedule;
        set { _medicationSchedule = value; OnPropertyChanged(nameof(MedicationSchedules)); }
    }

    private MedicationSchedulesRepo medicationSchedulesRepo;

    // Commands
    public ICommand MarkAsTakenCommand { get; set; }
    public ICommand MarkAsMissedCommand { get; set; }

    // Constructor
    public MedicationScheduleViewModel()
    {
        medicationSchedulesRepo = new MedicationSchedulesRepo();
        MarkAsTakenCommand = new RelayCommand(MarkAsTaken);
        MarkAsMissedCommand = new RelayCommand(MarkAsMissed);
        LoadMedications();
    }

    // Load medications and process the ScheduledTime
    public void LoadMedications()
    {
        MedicationSchedules = medicationSchedulesRepo.ReadAll();

        // Process each medication's timing
        foreach (var medication in MedicationSchedules)
        {
            medication.SetMedicationTimingFromScheduledTime(); // Parse the ScheduledTime string
        }
    }

    // Command methods
    private void MarkAsTaken()
    {
        Status = "Taken";
    }

    private void MarkAsMissed()
    {
        Status = "Missed";
    }

    // INotifyPropertyChanged implementation
    public event PropertyChangedEventHandler PropertyChanged;
    private void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}






