Employee.cs
-----------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmployeeDatabaseApp.Models
{
	public class Employee
	{
		public string Id {get; set; }
		public string Name { get; set; }
		public string Email { get; set; }
		public string Designation { get; set; }
		public string Address { get; set; }
		public string PhotoPath { get; set; }
		public string ProfileImage { get; set; }
		public string PhoneNumber { get; set; }
	}
}


EmployeeViewModel.cs
--------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using EmployeeDatabaseApp.Commands;
using EmployeeDatabaseApp.Dialogs;
using EmployeeDatabaseApp.Models;
using System.Windows.Controls;
using System.Globalization;
using Microsoft.Win32;
using System.Xml.Linq;
using System.IO;
using System.Xml;


namespace EmployeeDatabaseApp.ViewModels
{
	public delegate void DWindowClose();
	public class EmployeeViewModel : IDataErrorInfo, INotifyPropertyChanged
	{
		public DWindowClose AddEmployeeDialogClose;
		public DWindowClose EditEmployeeDialogClose;

		private string _id;
		private string _name;
		private string _email;
		private string _designation;
		private string _address;
		private string _photoPath;
		private string _phoneNumber;

		// Dictionary to hold Validation errors
		private readonly Dictionary<string, string> _errors = new Dictionary<string, string>();

		public string Id
		{
			get { return _id; }
			set
			{
				if (_id != value)
				{
					_id = value;
					ValidateProperty(nameof(Id));
					OnPropertyChanged(nameof(Id));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					_name = value;
					ValidateProperty(nameof(Name));
					OnPropertyChanged(nameof(Name));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Email
		{
			get { return _email; }
			set
			{
				if (_email != value)
				{
					_email = value;
					ValidateProperty(nameof(Email));
					OnPropertyChanged(nameof(Email));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}

		public string Designation
		{
			get { return _designation; }
			set
			{
				if (_designation != value)
				{
					_designation = value;
					ValidateProperty(nameof(Designation));
					OnPropertyChanged(nameof(Designation));
					OnPropertyChanged(nameof(IsButtonEnabled));
				}
			}
		}
		public string Address
		{
			get { return _address; }
			set
			{
				_address = value;
				OnPropertyChanged("Address");
			}
		}
		public string PhotoPath
		{
			get { return _photoPath; }
			set
			{
				_photoPath = value;
				OnPropertyChanged("PhotoPath");
			}
		}
		public string PhoneNumber
		{
			get { return _phoneNumber; }
			set
			{
				_phoneNumber = value;
				ValidateProperty(nameof(PhoneNumber));
				OnPropertyChanged("PhoneNumber");
			}
		}


		private Employee _newEmployee;
		public Employee NewEmployee
		{
			get => _newEmployee;
			set { _newEmployee = value; OnPropertyChanged(nameof(NewEmployee)); }
		}
		private Employee _selectedEmployee;
		public Employee SelectedEmployee
		{
			get { return _selectedEmployee; }
			set
			{
				_selectedEmployee = value;
				OnPropertyChanged(nameof(SelectedEmployee));
			}
		}

		private ObservableCollection<Employee> _employees = null;
		public ObservableCollection<Employee> Employees
		{
			get => _employees;
			set { _employees = value; OnPropertyChanged(nameof(Employees)); }
		}

		// CRUD Commands
		public ICommand CreateCommand { get; }
		public ICommand UpdateCommand { get; }
		public ICommand DeleteCommand { get; }

		// File commands
		public ICommand OpenFileCommand { get; }
		public ICommand SaveFileCommand { get; }

		public EmployeeViewModel()
		{
			this.NewEmployee = new Employee
			{
				Id = "1",
				Name = "Keerthana",
				Email = "kj@gmail.com",
				Designation = "Software Developer",
				Address = "Ernakulam",
				PhoneNumber = "1234567890"
			};

			// Initialise Employee collection
			this.Employees = new ObservableCollection<Employee>
			{
				new Employee { Id = "1", Name = "Keerthana", Email = "kj@gmail.com", Designation = "Software Developer", Address = "Ernakulam", PhoneNumber = "1234567890" },
				new Employee { Id = "2", Name = "Keerthana", Email = "kj@gmail.com", Designation = "Software Developer", Address = "Ernakulam", PhoneNumber = "1234567890" }
			};

			CreateCommand = new RelayCommand(Create);
			UpdateCommand = new RelayCommand(Update);
			DeleteCommand = new RelayCommand(Delete);

			// Initialise with a new Employee object
			NewEmployee = new Employee();

			OpenFileCommand = new RelayCommand(OpenFile);
			SaveFileCommand = new RelayCommand(SaveFile);
		}

		public void Create()
		{
			// ID increment logic (can be implemented)
			//string id = (Employees.Count + 1).ToString();
			Employee newEmployee = new Employee
			{
				Id = NewEmployee.Id,
				Name = NewEmployee.Name,
				Email = NewEmployee.Email,
				PhoneNumber = NewEmployee.PhoneNumber,
				Address = NewEmployee.Address,
				Designation = NewEmployee.Designation,
				ProfileImage = NewEmployee.ProfileImage,
				PhotoPath = NewEmployee.PhotoPath,
			};
			var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);
			if (result != MessageBoxResult.Yes)
			{
				return;
			}
			Employees.Add(newEmployee);
			//NewEmployee = new Employee();
			
			result = MessageBox.Show(messageBoxText: "Created Successfully",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
			if (result == MessageBoxResult.OK)
			{
				// Close the window
				WindowConfig.addEmployeeDialog.Close();
			}

			this.NewEmployee = new Employee
			{
				Id = "0",
				Name = " ",
				Email = " ",
				Designation = " ",
				Address = " ",
				PhoneNumber = " "
			};


		}
		public void Update()
		{
			if (this.SelectedEmployee == null)
			{
				return;
			}
			this.SelectedEmployee = this.SelectedEmployee;
			var result = MessageBox.Show(messageBoxText: "Updated Successfully",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
			if (result == MessageBoxResult.OK)
			{
				// Close the window
				WindowConfig.editEmployeeDialog.Close();
			}
		}

		public void Delete()
		{
			
			if (SelectedEmployee == null)
			{
				var result = MessageBox.Show(messageBoxText: "Please select an employee to delete",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
				return;
			}
			if (SelectedEmployee != null)
			{
				var employeeCount = Employees.Count();
				var result = MessageBox.Show(messageBoxText: "Are you sure to delete?",
					caption: "Warning",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Information);
				if (result != MessageBoxResult.Yes)
				{
					return;
				}
				else
				{
					Employees.Remove(SelectedEmployee);
					if(Employees.Count() == employeeCount - 1)
					result = MessageBox.Show(messageBoxText: "Deleted",
						caption: "Alert",
						button: MessageBoxButton.OK,
						icon: MessageBoxImage.Information);
					SelectedEmployee = null;

				}
			}
		}

		// Profile Image
		private BitmapImage _profileImage;
		public BitmapImage ProfileImage
		{
			get
			{
				return _profileImage;
			}
			set
			{
				_profileImage = value;
				OnPropertyChanged("ProfileImage");
			}
		}

		private bool _isValid = false;
		public bool IsValid
		{
			get => _isValid;
			private set
			{
				if (_isValid != value)
				{
					_isValid = value;
					OnPropertyChanged(nameof(IsValid)); // Notify UI of validation state changes
				}
			}
		}
		// Property to control Add button
		// Enabled if no error exists
		//public bool IsButtonEnabled => !_errors.Any();

		// Centralized validation method
		public void ValidateProperty(string propertyName)
		{
			string error = string.Empty;
			switch (propertyName)
			{
				case nameof(Id):
					error = string.IsNullOrEmpty(Id) ? "ID is required" : null;
					break;
				case nameof(Name):
					error = string.IsNullOrEmpty(Name) ? "Name is required" : null;
					break;
				case nameof(Email):
					if (string.IsNullOrEmpty(Email))
					{
						error = "Email is required";
					}
					else if (!IsValidEmail(Email))
					{
						error = "Invalid email format";
					}
					break;
				case nameof(Designation):
					error = string.IsNullOrEmpty(Designation) ? "Designation is required" : null;
					break;
				case nameof(PhoneNumber):
					if (string.IsNullOrEmpty(PhoneNumber))
					{
						error = "Phone Number is required";
					}
					else if (!IsValidPhoneNumber(PhoneNumber))
					{
						error = "Phone Number must be 10 digits ";
					}
					break;
			}

			if (error != null)
			{
				_errors[propertyName] = error;
			}
			else
			{
				_errors.Remove(propertyName);
			}

			// Update the overall validation state
			IsValid = _errors.Count == 0;

			// Notify UI of error changes
			OnPropertyChanged(nameof(Error));
		}

		// Method to validate email format
		private bool IsValidEmail(string email)
		{
			string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
			return Regex.IsMatch(email, emailPattern);
		}

		// Method to validate phone number format
		private bool IsValidPhoneNumber(string phoneNumber)
		{
			string phonePattern = @"^\d{10}$";
			return Regex.IsMatch(phoneNumber, phonePattern);
		}

		public string Error => _errors.Any() ? "Please fix the errors" : null;

		// Button enabling condition
		public bool IsButtonEnabled => string.IsNullOrEmpty(this[nameof(Email)]) && string.IsNullOrEmpty(this[nameof(PhoneNumber)])
			&& string.IsNullOrEmpty(this[nameof(Id)]) && string.IsNullOrEmpty(this[nameof(Designation)]);

		public string this[string columnName] => _errors.ContainsKey(columnName) ? _errors[columnName] : null;

		// Property changed notification
		public event PropertyChangedEventHandler PropertyChanged;
		protected void OnPropertyChanged(string propertyName)
		{
			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
		}

		// Method to load the image (after file selection)
		public void LoadImage(string imagePath)
		{
			ProfileImage = new BitmapImage(new Uri(imagePath));
		}

		// File
		private void OpenFile()
		{
			var result = MessageBox.Show(messageBoxText: "Are you sure to Import? The current table will be cleared",
					caption: "Confirm",
					button: MessageBoxButton.YesNo,
					icon: MessageBoxImage.Question);
			if (result != MessageBoxResult.Yes)
			{
				return;
			}

			OpenFileDialog openFileDialog = new OpenFileDialog
			{
				Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.*"
			};

			//openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
			//PhotoPath = openFileDialog.FileName; // Store the image path

			if (openFileDialog.ShowDialog() == true)
			{
				string filePath = openFileDialog.FileName;

				if (IsValidXmlFile(filePath, out string errorMessage))
				{
					LoadEmployees(filePath);
					//imgPicture.Source = new BitmapImage(new Uri(Employee.ImagePath)); // Load the image for display
				}
				else
				{
					// Show an error message if the file is invalid
					MessageBox.Show(errorMessage, "Invalid File", MessageBoxButton.OK, MessageBoxImage.Error);
				}
				
				
			}
		}

		private bool IsValidXmlFile(string filePath, out string errorMessage)
		{
			errorMessage = string.Empty;
			try
			{
				// Try to load the XML file
				XmlDocument xmlDoc = new XmlDocument();
				xmlDoc.Load(filePath);
				return true;
			}
			catch (XmlException)
			{
				// If an XmlException occurs, the file is not a valid XML file
				errorMessage = "Invalid XML file";
				return false;
			}
			catch (FileNotFoundException )
			{
				// If a FileNotFoundException occurs, the file does not exist
				errorMessage = "The selected file was not found";
				return false;
			}
			catch (Exception ex)
			{
				// Catch any other exceptions and return false
				errorMessage = "An unexpected error occurred: " + ex.Message;
				return false;
			}
		}

		private void SaveFile()
		{
			SaveFileDialog saveFileDialog = new SaveFileDialog
			{
				Filter = "XML files (*.xml)|*.xml|All files (*.*)|*.*",
				DefaultExt = "xml"
			};

			if (saveFileDialog.ShowDialog() == true)
			{
				string filePath = saveFileDialog.FileName;
				SaveEmployees(filePath);

				var result = MessageBox.Show(messageBoxText: "Exported successfully",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
			}
		}

		private void SaveEmployees(string filePath)
		{
			XDocument xmlDoc = new XDocument(
				new XElement("AddEmployee",
					from employee in Employees
					select new XElement("Employee",
						new XElement("ID", employee.Id),
						new XElement("Name", employee.Name),
						new XElement("Email", employee.Email),
						new XElement("Designation", employee.Designation),
						new XElement("PhoneNumber", employee.PhoneNumber),
						new XElement("PhotoPath", employee.PhotoPath),
						new XElement("Address", employee.Address)

					)
				)
			);

			xmlDoc.Save(filePath);
		}

		private void LoadEmployees(string filePath)
		{
			//Clear existing data in grid
			Employees.Clear();
			XDocument xmlDoc = XDocument.Load(filePath);
			var employees = xmlDoc.Descendants("Employee");

			foreach (var employee in employees)
			{
				Employees.Add(new Employee
				{
					Id = employee.Element("ID").Value,
					Name = employee.Element("Name").Value,
					Email = employee.Element("Email").Value,
					Designation = employee.Element("Designation").Value,
					PhoneNumber = employee.Element("PhoneNumber").Value,
					Address = employee.Element("Address").Value,
					PhotoPath = employee.Element("PhotoPath").Value,
				});
			}
		}

	}
}


MainWindow.xaml
---------------

<Window x:Class="EmployeeDatabaseApp.MainWindow" WindowState="Maximized"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:EmployeeDatabaseApp" xmlns:viewmodels="clr-namespace:EmployeeDatabaseApp.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:EmployeeViewModel}"
		mc:Ignorable="d"
        Title="Employee Database" Height="450" Width="800" Closed="Window_Closed">
	<Grid>
		<StackPanel Margin="0,0,0,413">
			<Menu VerticalAlignment="Top">
				<MenuItem x:Name="mnuFile" Header="_File">
					<MenuItem x:Name="mnuImport" Header="_Import" Command="{Binding OpenFileCommand}" />
					<MenuItem x:Name="mnuExport" Header="_Export" Command="{Binding SaveFileCommand}"/>
					<Separator/>
					<MenuItem x:Name="mnuExit" Header="E_xit" Click="mnuExit_Click"/>
				</MenuItem>
			</Menu>
		</StackPanel>
		<StackPanel Margin="0,1,0,326">
			<TextBlock x:Name="lblEmployeeDatabase" Height="52" Margin="131,56,142,0" TextWrapping="Wrap" Text="Employee Database" VerticalAlignment="Top" Width="527" FontSize="24" FontFamily="Verdana" FontWeight="Bold" TextAlignment="Center"/>
		</StackPanel>
		<StackPanel Orientation="Horizontal" Margin="0,0,-11,217" VerticalAlignment="Center" HorizontalAlignment="Center" Height="211" Width="761">
			<Button x:Name="btnAdd" Height="30" Margin="588,174,0,0" VerticalAlignment="Top" Width="41" Click="btnAdd_Click">
				<Button.Background>
					<ImageBrush ImageSource="/8201370_add_plus_button_ui_new_icon.png"/>
				</Button.Background>
			</Button>
			<Button x:Name="btnDelete" Height="30" Margin="10,174,0,0" VerticalAlignment="Top" Width="41" Command="{Binding DeleteCommand}" Click="btnDelete_Click">
				<Button.Background>
					<ImageBrush ImageSource="/619539_close_delete_dismiss_exit_cancel_icon.png"/>
				</Button.Background>
			</Button>
			<Button x:Name="btnEdit" Height="30" Margin="10,174,0,0" VerticalAlignment="Top" Width="41" Click="btnEdit_Click">
				<Button.Background>
					<ImageBrush ImageSource="/11928482.png"/>
				</Button.Background>
			</Button>
		</StackPanel>

		<DataGrid x:Name="dgEmployeeList" Height="196" Margin="43,209,37,29" Width="720" ItemsSource="{Binding Employees}" 
          SelectedItem="{Binding SelectedEmployee}" 
          IsReadOnly="True" 
		  Background="SkyBlue"
          AutoGenerateColumns="False">
			<DataGrid.Columns>
				<DataGridTextColumn Header="Name" Width="*" Binding="{Binding Name}"/>
				<DataGridTextColumn Header="Email" Width="*" Binding="{Binding Email}"/>
				<DataGridTextColumn Header="Designation" Width="*" Binding="{Binding Designation}"/>

				<DataGridTextColumn Header="ID"  Width="*" Binding="{Binding Id}"/>
				<DataGridTemplateColumn Header="Picture" Width="*">
					<DataGridTemplateColumn.CellTemplate>
						<DataTemplate>
							<Image Source="{Binding ProfileImage}" Width="50" Height="50"/>
						</DataTemplate>
					</DataGridTemplateColumn.CellTemplate>
				</DataGridTemplateColumn>
				<DataGridTextColumn Header="Address" Width="*" Binding="{Binding Address}"/>
				<DataGridTextColumn Header="PhoneNumber" Binding="{Binding PhoneNumber}"/>
			</DataGrid.Columns>
		</DataGrid>
	</Grid>
</Window>


MainWindow.xaml.cs
------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using EmployeeDatabaseApp.Dialogs;

namespace EmployeeDatabaseApp
{
	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
	public partial class MainWindow : Window
	{
		public MainWindow()
		{
			InitializeComponent();
			this.DataContext = WindowConfig.employeeViewModel;
		}

		private void btnAdd_Click(object sender, RoutedEventArgs e)
		{
			WindowConfig.addEmployeeDialog.ShowDialog();
			WindowConfig.employeeViewModel.AddEmployeeDialogClose = WindowConfig.addEmployeeDialog.WindowClose;
		}

		private void btnEdit_Click(object sender, RoutedEventArgs e)
		{
			if (dgEmployeeList.SelectedIndex == -1)
			{
				var result = MessageBox.Show(messageBoxText: "Please select an employee to edit",
					caption: "Alert",
					button: MessageBoxButton.OK,
					icon: MessageBoxImage.Information);
				return;
			}
			WindowConfig.editEmployeeDialog.ShowDialog();
			WindowConfig.employeeViewModel.AddEmployeeDialogClose = WindowConfig.addEmployeeDialog.WindowClose;
		}

		private void btnDelete_Click(object sender, RoutedEventArgs e)
		{
			//if (dgEmployeeList.SelectedIndex == -1)
			//{
			//	var result = MessageBox.Show(messageBoxText: "Please select an employee to delete",
			//		caption: "Alert",
			//		button: MessageBoxButton.OK,
			//		icon: MessageBoxImage.Information);
			//	return;
			//}
		}

		private void Window_Closed(object sender, EventArgs e)
		{
			Application.Current.Shutdown();
		}

		private void mnuExit_Click(object sender, RoutedEventArgs e)
		{
			Application.Current.Shutdown();
		}
	}
}
